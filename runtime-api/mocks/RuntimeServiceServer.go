// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import runtimepb "gitlab.com/konstellation/konstellation-ce/kre/runtime-api/runtimepb"

// RuntimeServiceServer is an autogenerated mock type for the RuntimeServiceServer type
type RuntimeServiceServer struct {
	mock.Mock
}

// ActivateVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) ActivateVersion(_a0 context.Context, _a1 *runtimepb.ActivateVersionRequest) (*runtimepb.ActivateVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.ActivateVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.ActivateVersionRequest) *runtimepb.ActivateVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.ActivateVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.ActivateVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) DeactivateVersion(_a0 context.Context, _a1 *runtimepb.DeactivateVersionRequest) (*runtimepb.DeactivateVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.DeactivateVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.DeactivateVersionRequest) *runtimepb.DeactivateVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.DeactivateVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.DeactivateVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) DeployVersion(_a0 context.Context, _a1 *runtimepb.DeployVersionRequest) (*runtimepb.DeployVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.DeployVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.DeployVersionRequest) *runtimepb.DeployVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.DeployVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.DeployVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) StopVersion(_a0 context.Context, _a1 *runtimepb.StopVersionRequest) (*runtimepb.StopVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.StopVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.StopVersionRequest) *runtimepb.StopVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.StopVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.StopVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVersionConfig provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) UpdateVersionConfig(_a0 context.Context, _a1 *runtimepb.UpdateVersionConfigRequest) (*runtimepb.UpdateVersionConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.UpdateVersionConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.UpdateVersionConfigRequest) *runtimepb.UpdateVersionConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.UpdateVersionConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.UpdateVersionConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchNodeLogs provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) WatchNodeLogs(_a0 *runtimepb.WatchNodeLogsRequest, _a1 runtimepb.RuntimeService_WatchNodeLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*runtimepb.WatchNodeLogsRequest, runtimepb.RuntimeService_WatchNodeLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
