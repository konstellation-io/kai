syntax = "proto3";

package runtime;
option go_package = "runtimepb";

message Entrypoint {
  string proto_file = 1;
  string image = 2;
  string src = 3;
}

message Workflow {

  message Node {
    string Id = 1;
    string Name = 2;
    string Image = 3;
    string Src = 4;
  }

  message Edge {
    string Id = 1;
    string FromNode = 2;
    string ToNode = 3;
  }

  string name = 1;
  string entrypoint = 2;
  repeated Node nodes = 3;
  repeated Edge edges = 4;
}

message Version {
  message Config {
    string key = 1;
    string value = 2;
  }

  string name = 1;
  Entrypoint entrypoint = 2;
  repeated Config config = 3;
  repeated Workflow workflows = 4;
}

message StartVersionRequest {
  Version version = 1;
}

message StartVersionResponse {
  bool success = 1;
  string message = 2;
}

message UpdateVersionConfigRequest {
  Version version = 1;
}

message UpdateVersionConfigResponse {
  bool success = 1;
  string message = 2;
}

message StopVersionRequest {
  Version version = 1;
}

message StopVersionResponse {
  bool success = 1;
  string message = 2;
}

message PublishVersionRequest {
  Version version = 1;
}

message PublishVersionResponse {
  bool success = 1;
  string message = 2;
}

message UnpublishVersionRequest {
  Version version = 1;
}

message UnpublishVersionResponse {
  bool success = 1;
  string message = 2;
}

message WatchNodeLogsRequest {
  string nodeId = 1;
}

message WatchNodeLogsResponse {
  string date = 1;
  string type = 2;
  string versionId = 3;
  string nodeId = 4;
  string podId = 5;
  string message = 6;
  string level = 7;
}

message WatchVersionRequest {
  Version version = 1;
}

message VersionNodeStatusResponse {
  string NodeId = 1;
  string Status = 2;
  string Message = 3;
}

service RuntimeService {
  rpc StartVersion (StartVersionRequest) returns (StartVersionResponse) {
  };
  rpc StopVersion (StopVersionRequest) returns (StopVersionResponse) {
  };
  rpc PublishVersion (PublishVersionRequest) returns (PublishVersionResponse) {
  };
  rpc UnpublishVersion (UnpublishVersionRequest) returns (UnpublishVersionResponse) {
  };
  rpc UpdateVersionConfig (UpdateVersionConfigRequest) returns (UpdateVersionConfigResponse) {
  };
  rpc WatchNodeLogs (WatchNodeLogsRequest) returns (stream WatchNodeLogsResponse) {
  };
  rpc WatchVersionStatus (WatchVersionRequest) returns (stream VersionNodeStatusResponse) {
  };
};
