// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import k8smanagerpb "gitlab.com/konstellation/konstellation-ce/kre/admin-api/k8smanagerpb"
import mock "github.com/stretchr/testify/mock"

// RuntimeServiceServer is an autogenerated mock type for the RuntimeServiceServer type
type RuntimeServiceServer struct {
	mock.Mock
}

// CheckRuntimeIsCreated provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) CheckRuntimeIsCreated(_a0 context.Context, _a1 *k8smanagerpb.CheckRuntimeIsCreatedRequest) (*k8smanagerpb.CheckRuntimeIsCreatedResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *k8smanagerpb.CheckRuntimeIsCreatedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *k8smanagerpb.CheckRuntimeIsCreatedRequest) *k8smanagerpb.CheckRuntimeIsCreatedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*k8smanagerpb.CheckRuntimeIsCreatedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8smanagerpb.CheckRuntimeIsCreatedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuntime provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) CreateRuntime(_a0 context.Context, _a1 *k8smanagerpb.CreateRuntimeRequest) (*k8smanagerpb.CreateRuntimeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *k8smanagerpb.CreateRuntimeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *k8smanagerpb.CreateRuntimeRequest) *k8smanagerpb.CreateRuntimeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*k8smanagerpb.CreateRuntimeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8smanagerpb.CreateRuntimeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
