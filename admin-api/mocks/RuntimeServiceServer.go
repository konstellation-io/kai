// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import runtimepb "gitlab.com/konstellation/konstellation-ce/kre/admin-api/runtimepb"

// RuntimeServiceServer is an autogenerated mock type for the RuntimeServiceServer type
type RuntimeServiceServer struct {
	mock.Mock
}

// PublishVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) PublishVersion(_a0 context.Context, _a1 *runtimepb.PublishVersionRequest) (*runtimepb.PublishVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.PublishVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.PublishVersionRequest) *runtimepb.PublishVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.PublishVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.PublishVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) StartVersion(_a0 context.Context, _a1 *runtimepb.StartVersionRequest) (*runtimepb.StartVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.StartVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.StartVersionRequest) *runtimepb.StartVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.StartVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.StartVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) StopVersion(_a0 context.Context, _a1 *runtimepb.StopVersionRequest) (*runtimepb.StopVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.StopVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.StopVersionRequest) *runtimepb.StopVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.StopVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.StopVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpublishVersion provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) UnpublishVersion(_a0 context.Context, _a1 *runtimepb.UnpublishVersionRequest) (*runtimepb.UnpublishVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.UnpublishVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.UnpublishVersionRequest) *runtimepb.UnpublishVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.UnpublishVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.UnpublishVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVersionConfig provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) UpdateVersionConfig(_a0 context.Context, _a1 *runtimepb.UpdateVersionConfigRequest) (*runtimepb.UpdateVersionConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *runtimepb.UpdateVersionConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.UpdateVersionConfigRequest) *runtimepb.UpdateVersionConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.UpdateVersionConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.UpdateVersionConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchNodeLogs provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) WatchNodeLogs(_a0 *runtimepb.WatchNodeLogsRequest, _a1 runtimepb.RuntimeService_WatchNodeLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*runtimepb.WatchNodeLogsRequest, runtimepb.RuntimeService_WatchNodeLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchVersionStatus provides a mock function with given fields: _a0, _a1
func (_m *RuntimeServiceServer) WatchVersionStatus(_a0 *runtimepb.WatchVersionRequest, _a1 runtimepb.RuntimeService_WatchVersionStatusServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*runtimepb.WatchVersionRequest, runtimepb.RuntimeService_WatchVersionStatusServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
