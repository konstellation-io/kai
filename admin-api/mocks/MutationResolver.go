// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/entity"
import gql "gitlab.com/konstellation/konstellation-ce/kre/admin-api/adapter/gql"
import mock "github.com/stretchr/testify/mock"

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// CreateRuntime provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateRuntime(ctx context.Context, input gql.CreateRuntimeInput) (*gql.CreateRuntimeResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *gql.CreateRuntimeResponse
	if rf, ok := ret.Get(0).(func(context.Context, gql.CreateRuntimeInput) *gql.CreateRuntimeResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gql.CreateRuntimeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.CreateRuntimeInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVersion provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateVersion(ctx context.Context, input gql.CreateVersionInput) (*gql.CreateVersionResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *gql.CreateVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, gql.CreateVersionInput) *gql.CreateVersionResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gql.CreateVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.CreateVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishVersion provides a mock function with given fields: ctx, input
func (_m *MutationResolver) PublishVersion(ctx context.Context, input gql.PublishVersionInput) (*entity.Version, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, gql.PublishVersionInput) *entity.Version); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.PublishVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVersion provides a mock function with given fields: ctx, input
func (_m *MutationResolver) StartVersion(ctx context.Context, input gql.StartVersionInput) (*entity.Version, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, gql.StartVersionInput) *entity.Version); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.StartVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVersion provides a mock function with given fields: ctx, input
func (_m *MutationResolver) StopVersion(ctx context.Context, input gql.StopVersionInput) (*entity.Version, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, gql.StopVersionInput) *entity.Version); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.StopVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpublishVersion provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UnpublishVersion(ctx context.Context, input gql.UnpublishVersionInput) (*entity.Version, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, gql.UnpublishVersionInput) *entity.Version); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.UnpublishVersionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSettings provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateSettings(ctx context.Context, input gql.SettingsInput) (*gql.UpdateSettingsResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *gql.UpdateSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, gql.SettingsInput) *gql.UpdateSettingsResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gql.UpdateSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.SettingsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVersionConfiguration provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateVersionConfiguration(ctx context.Context, input gql.UpdateConfigurationInput) (*entity.Version, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, gql.UpdateConfigurationInput) *entity.Version); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gql.UpdateConfigurationInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
