// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import runtimepb "gitlab.com/konstellation/konstellation-ce/kre/admin-api/runtimepb"

// RuntimeServiceClient is an autogenerated mock type for the RuntimeServiceClient type
type RuntimeServiceClient struct {
	mock.Mock
}

// PublishVersion provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) PublishVersion(ctx context.Context, in *runtimepb.PublishVersionRequest, opts ...grpc.CallOption) (*runtimepb.PublishVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtimepb.PublishVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.PublishVersionRequest, ...grpc.CallOption) *runtimepb.PublishVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.PublishVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.PublishVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVersion provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) StartVersion(ctx context.Context, in *runtimepb.StartVersionRequest, opts ...grpc.CallOption) (*runtimepb.StartVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtimepb.StartVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.StartVersionRequest, ...grpc.CallOption) *runtimepb.StartVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.StartVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.StartVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVersion provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) StopVersion(ctx context.Context, in *runtimepb.StopVersionRequest, opts ...grpc.CallOption) (*runtimepb.StopVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtimepb.StopVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.StopVersionRequest, ...grpc.CallOption) *runtimepb.StopVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.StopVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.StopVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpublishVersion provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) UnpublishVersion(ctx context.Context, in *runtimepb.UnpublishVersionRequest, opts ...grpc.CallOption) (*runtimepb.UnpublishVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtimepb.UnpublishVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.UnpublishVersionRequest, ...grpc.CallOption) *runtimepb.UnpublishVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.UnpublishVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.UnpublishVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVersionConfig provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) UpdateVersionConfig(ctx context.Context, in *runtimepb.UpdateVersionConfigRequest, opts ...grpc.CallOption) (*runtimepb.UpdateVersionConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtimepb.UpdateVersionConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.UpdateVersionConfigRequest, ...grpc.CallOption) *runtimepb.UpdateVersionConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtimepb.UpdateVersionConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.UpdateVersionConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchNodeLogs provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) WatchNodeLogs(ctx context.Context, in *runtimepb.WatchNodeLogsRequest, opts ...grpc.CallOption) (runtimepb.RuntimeService_WatchNodeLogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 runtimepb.RuntimeService_WatchNodeLogsClient
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.WatchNodeLogsRequest, ...grpc.CallOption) runtimepb.RuntimeService_WatchNodeLogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtimepb.RuntimeService_WatchNodeLogsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.WatchNodeLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVersionStatus provides a mock function with given fields: ctx, in, opts
func (_m *RuntimeServiceClient) WatchVersionStatus(ctx context.Context, in *runtimepb.WatchVersionRequest, opts ...grpc.CallOption) (runtimepb.RuntimeService_WatchVersionStatusClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 runtimepb.RuntimeService_WatchVersionStatusClient
	if rf, ok := ret.Get(0).(func(context.Context, *runtimepb.WatchVersionRequest, ...grpc.CallOption) runtimepb.RuntimeService_WatchVersionStatusClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtimepb.RuntimeService_WatchVersionStatusClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *runtimepb.WatchVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
