// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "gitlab.com/konstellation/kre/admin-api/domain/entity"
import gql "gitlab.com/konstellation/kre/admin-api/adapter/gql"
import mock "github.com/stretchr/testify/mock"

// RuntimeResolver is an autogenerated mock type for the RuntimeResolver type
type RuntimeResolver struct {
	mock.Mock
}

// CreationAuthor provides a mock function with given fields: ctx, obj
func (_m *RuntimeResolver) CreationAuthor(ctx context.Context, obj *entity.Runtime) (*entity.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Runtime) *entity.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Runtime) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreationDate provides a mock function with given fields: ctx, obj
func (_m *RuntimeResolver) CreationDate(ctx context.Context, obj *entity.Runtime) (string, error) {
	ret := _m.Called(ctx, obj)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Runtime) string); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Runtime) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedVersion provides a mock function with given fields: ctx, obj
func (_m *RuntimeResolver) PublishedVersion(ctx context.Context, obj *entity.Runtime) (*entity.Version, error) {
	ret := _m.Called(ctx, obj)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Runtime) *entity.Version); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Runtime) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: ctx, obj
func (_m *RuntimeResolver) Status(ctx context.Context, obj *entity.Runtime) (gql.RuntimeStatus, error) {
	ret := _m.Called(ctx, obj)

	var r0 gql.RuntimeStatus
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Runtime) gql.RuntimeStatus); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Get(0).(gql.RuntimeStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Runtime) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
