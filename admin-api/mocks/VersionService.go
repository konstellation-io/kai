// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gitlab.com/konstellation/kre/admin-api/domain/entity"
import mock "github.com/stretchr/testify/mock"

// VersionService is an autogenerated mock type for the VersionService type
type VersionService struct {
	mock.Mock
}

// Publish provides a mock function with given fields: runtime, version
func (_m *VersionService) Publish(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: runtime, version
func (_m *VersionService) Start(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: runtime, version
func (_m *VersionService) Stop(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unpublish provides a mock function with given fields: runtime, version
func (_m *VersionService) Unpublish(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfig provides a mock function with given fields: runtime, version
func (_m *VersionService) UpdateConfig(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
