// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gql "gitlab.com/konstellation/kre/admin-api/adapter/gql"
import mock "github.com/stretchr/testify/mock"

// ResolverRoot is an autogenerated mock type for the ResolverRoot type
type ResolverRoot struct {
	mock.Mock
}

// Mutation provides a mock function with given fields:
func (_m *ResolverRoot) Mutation() gql.MutationResolver {
	ret := _m.Called()

	var r0 gql.MutationResolver
	if rf, ok := ret.Get(0).(func() gql.MutationResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.MutationResolver)
		}
	}

	return r0
}

// Node provides a mock function with given fields:
func (_m *ResolverRoot) Node() gql.NodeResolver {
	ret := _m.Called()

	var r0 gql.NodeResolver
	if rf, ok := ret.Get(0).(func() gql.NodeResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.NodeResolver)
		}
	}

	return r0
}

// Query provides a mock function with given fields:
func (_m *ResolverRoot) Query() gql.QueryResolver {
	ret := _m.Called()

	var r0 gql.QueryResolver
	if rf, ok := ret.Get(0).(func() gql.QueryResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.QueryResolver)
		}
	}

	return r0
}

// Runtime provides a mock function with given fields:
func (_m *ResolverRoot) Runtime() gql.RuntimeResolver {
	ret := _m.Called()

	var r0 gql.RuntimeResolver
	if rf, ok := ret.Get(0).(func() gql.RuntimeResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.RuntimeResolver)
		}
	}

	return r0
}

// Subscription provides a mock function with given fields:
func (_m *ResolverRoot) Subscription() gql.SubscriptionResolver {
	ret := _m.Called()

	var r0 gql.SubscriptionResolver
	if rf, ok := ret.Get(0).(func() gql.SubscriptionResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.SubscriptionResolver)
		}
	}

	return r0
}

// UserActivity provides a mock function with given fields:
func (_m *ResolverRoot) UserActivity() gql.UserActivityResolver {
	ret := _m.Called()

	var r0 gql.UserActivityResolver
	if rf, ok := ret.Get(0).(func() gql.UserActivityResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.UserActivityResolver)
		}
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *ResolverRoot) Version() gql.VersionResolver {
	ret := _m.Called()

	var r0 gql.VersionResolver
	if rf, ok := ret.Get(0).(func() gql.VersionResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.VersionResolver)
		}
	}

	return r0
}

// VersionNodeStatus provides a mock function with given fields:
func (_m *ResolverRoot) VersionNodeStatus() gql.VersionNodeStatusResolver {
	ret := _m.Called()

	var r0 gql.VersionNodeStatusResolver
	if rf, ok := ret.Get(0).(func() gql.VersionNodeStatusResolver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gql.VersionNodeStatusResolver)
		}
	}

	return r0
}
