// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/entity"
import mock "github.com/stretchr/testify/mock"

// UserActivityRepo is an autogenerated mock type for the UserActivityRepo type
type UserActivityRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: activity
func (_m *UserActivityRepo) Create(activity entity.UserActivity) error {
	ret := _m.Called(activity)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.UserActivity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userEmail, activityType, fromDate, toDate, lastID
func (_m *UserActivityRepo) Get(userEmail *string, activityType *string, fromDate *string, toDate *string, lastID *string) ([]*entity.UserActivity, error) {
	ret := _m.Called(userEmail, activityType, fromDate, toDate, lastID)

	var r0 []*entity.UserActivity
	if rf, ok := ret.Get(0).(func(*string, *string, *string, *string, *string) []*entity.UserActivity); ok {
		r0 = rf(userEmail, activityType, fromDate, toDate, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserActivity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, *string, *string, *string, *string) error); ok {
		r1 = rf(userEmail, activityType, fromDate, toDate, lastID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
