// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/entity"
import mock "github.com/stretchr/testify/mock"

// RuntimeRepo is an autogenerated mock type for the RuntimeRepo type
type RuntimeRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *RuntimeRepo) Create(_a0 *entity.Runtime) (*entity.Runtime, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Runtime
	if rf, ok := ret.Get(0).(func(*entity.Runtime) *entity.Runtime); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Runtime) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *RuntimeRepo) FindAll() ([]entity.Runtime, error) {
	ret := _m.Called()

	var r0 []entity.Runtime
	if rf, ok := ret.Get(0).(func() []entity.Runtime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: runtimeID
func (_m *RuntimeRepo) GetByID(runtimeID string) (*entity.Runtime, error) {
	ret := _m.Called(runtimeID)

	var r0 *entity.Runtime
	if rf, ok := ret.Get(0).(func(string) *entity.Runtime); ok {
		r0 = rf(runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *RuntimeRepo) Update(_a0 *entity.Runtime) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
