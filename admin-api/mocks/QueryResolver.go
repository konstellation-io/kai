// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "gitlab.com/konstellation/kre/admin-api/domain/entity"
import gql "gitlab.com/konstellation/kre/admin-api/adapter/gql"
import mock "github.com/stretchr/testify/mock"

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// Alerts provides a mock function with given fields: ctx
func (_m *QueryResolver) Alerts(ctx context.Context) ([]*gql.Alert, error) {
	ret := _m.Called(ctx)

	var r0 []*gql.Alert
	if rf, ok := ret.Get(0).(func(context.Context) []*gql.Alert); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gql.Alert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Me provides a mock function with given fields: ctx
func (_m *QueryResolver) Me(ctx context.Context) (*entity.User, error) {
	ret := _m.Called(ctx)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context) *entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runtime provides a mock function with given fields: ctx, id
func (_m *QueryResolver) Runtime(ctx context.Context, id string) (*entity.Runtime, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Runtime
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Runtime); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runtimes provides a mock function with given fields: ctx
func (_m *QueryResolver) Runtimes(ctx context.Context) ([]*entity.Runtime, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Runtime
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Runtime); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Runtime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Settings provides a mock function with given fields: ctx
func (_m *QueryResolver) Settings(ctx context.Context) (*entity.Setting, error) {
	ret := _m.Called(ctx)

	var r0 *entity.Setting
	if rf, ok := ret.Get(0).(func(context.Context) *entity.Setting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Setting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserActivityList provides a mock function with given fields: ctx, userEmail, typeArg, fromDate, toDate, lastID
func (_m *QueryResolver) UserActivityList(ctx context.Context, userEmail *string, typeArg *gql.UserActivityType, fromDate *string, toDate *string, lastID *string) ([]*entity.UserActivity, error) {
	ret := _m.Called(ctx, userEmail, typeArg, fromDate, toDate, lastID)

	var r0 []*entity.UserActivity
	if rf, ok := ret.Get(0).(func(context.Context, *string, *gql.UserActivityType, *string, *string, *string) []*entity.UserActivity); ok {
		r0 = rf(ctx, userEmail, typeArg, fromDate, toDate, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserActivity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string, *gql.UserActivityType, *string, *string, *string) error); ok {
		r1 = rf(ctx, userEmail, typeArg, fromDate, toDate, lastID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx
func (_m *QueryResolver) Users(ctx context.Context) ([]*entity.User, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.User
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx, id
func (_m *QueryResolver) Version(ctx context.Context, id string) (*entity.Version, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Version); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Versions provides a mock function with given fields: ctx, runtimeID
func (_m *QueryResolver) Versions(ctx context.Context, runtimeID string) ([]*entity.Version, error) {
	ret := _m.Called(ctx, runtimeID)

	var r0 []*entity.Version
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Version); ok {
		r0 = rf(ctx, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
