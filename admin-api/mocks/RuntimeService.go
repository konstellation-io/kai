// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/entity"
import mock "github.com/stretchr/testify/mock"

// RuntimeService is an autogenerated mock type for the RuntimeService type
type RuntimeService struct {
	mock.Mock
}

// ActivateVersion provides a mock function with given fields: runtime, versionName
func (_m *RuntimeService) ActivateVersion(runtime *entity.Runtime, versionName string) error {
	ret := _m.Called(runtime, versionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, string) error); ok {
		r0 = rf(runtime, versionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeactivateVersion provides a mock function with given fields: runtime, versionName
func (_m *RuntimeService) DeactivateVersion(runtime *entity.Runtime, versionName string) error {
	ret := _m.Called(runtime, versionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, string) error); ok {
		r0 = rf(runtime, versionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployVersion provides a mock function with given fields: runtime, version
func (_m *RuntimeService) DeployVersion(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopVersion provides a mock function with given fields: runtime, versionName
func (_m *RuntimeService) StopVersion(runtime *entity.Runtime, versionName string) error {
	ret := _m.Called(runtime, versionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, string) error); ok {
		r0 = rf(runtime, versionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVersionConfig provides a mock function with given fields: runtime, version
func (_m *RuntimeService) UpdateVersionConfig(runtime *entity.Runtime, version *entity.Version) error {
	ret := _m.Called(runtime, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Runtime, *entity.Version) error); ok {
		r0 = rf(runtime, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchNodeLogs provides a mock function with given fields: runtime, nodeID, stopChannel
func (_m *RuntimeService) WatchNodeLogs(runtime *entity.Runtime, nodeID string, stopChannel <-chan bool) (<-chan *entity.NodeLog, error) {
	ret := _m.Called(runtime, nodeID, stopChannel)

	var r0 <-chan *entity.NodeLog
	if rf, ok := ret.Get(0).(func(*entity.Runtime, string, <-chan bool) <-chan *entity.NodeLog); ok {
		r0 = rf(runtime, nodeID, stopChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *entity.NodeLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Runtime, string, <-chan bool) error); ok {
		r1 = rf(runtime, nodeID, stopChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
