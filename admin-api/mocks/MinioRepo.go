// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/entity"
import logging "gitlab.com/konstellation/konstellation-ce/kre/admin-api/domain/usecase/logging"
import minio "gitlab.com/konstellation/konstellation-ce/kre/admin-api/adapter/repository/minio"
import mock "github.com/stretchr/testify/mock"

// MinioRepo is an autogenerated mock type for the MinioRepo type
type MinioRepo struct {
	mock.Mock
}

// CreateBucket provides a mock function with given fields: name, minioClient
func (_m *MinioRepo) CreateBucket(name string, minioClient *minio.MinioClient) (minio.Bucket, error) {
	ret := _m.Called(name, minioClient)

	var r0 minio.Bucket
	if rf, ok := ret.Get(0).(func(string, *minio.MinioClient) minio.Bucket); ok {
		r0 = rf(name, minioClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(minio.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *minio.MinioClient) error); ok {
		r1 = rf(name, minioClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient provides a mock function with given fields: logger, runtime
func (_m *MinioRepo) NewClient(logger logging.Logger, runtime *entity.Runtime) (*minio.MinioClient, error) {
	ret := _m.Called(logger, runtime)

	var r0 *minio.MinioClient
	if rf, ok := ret.Get(0).(func(logging.Logger, *entity.Runtime) *minio.MinioClient); ok {
		r0 = rf(logger, runtime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.MinioClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logging.Logger, *entity.Runtime) error); ok {
		r1 = rf(logger, runtime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
