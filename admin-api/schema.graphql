scalar Upload

type Query {
  me: User
  users: [User!]!
  runtime(id: ID!): Runtime!
  runtimes: [Runtime!]!
  version(id: ID!): Version!
  versions(runtimeId: ID!): [Version!]!
  alerts: [Alert!]
  settings: Settings!
  userActivityList(
    userEmail: String,
    type: UserActivityType,
    fromDate: String,
    toDate: String,
    lastId: String
  ): [UserActivity!]!
}

type Mutation {
  createRuntime(input: CreateRuntimeInput!): CreateRuntimeResponse!
  createVersion(input: CreateVersionInput!): CreateVersionResponse!
  deployVersion(input: DeployVersionInput!): Version!
  activateVersion(input: ActivateVersionInput!): Version!
  stopVersion(input: StopVersionInput!): Version!
  deactivateVersion(input: DeactivateVersionInput!): Version!
  updateSettings(input: SettingsInput!): UpdateSettingsResponse
  updateVersionConfiguration(input: UpdateConfigurationInput!): UpdateVersionConfigurationResponse!
}

type Subscription {
  runtimeCreated: Runtime!
}

input CreateRuntimeInput {
  name: String!
}

type CreateRuntimeResponse {
  errors: [Error!]
  runtime: Runtime
}

input CreateVersionInput {
  file: Upload!
  runtimeId: String!
}

input DeployVersionInput {
  versionId: ID!
}

input ActivateVersionInput {
  versionId: ID!
  comment: String!
}

input StopVersionInput {
  versionId: ID!
}

input DeactivateVersionInput {
  versionId: ID!
}

type CreateVersionResponse {
  errors: [Error!]
  version: Version!
}

input SettingsInput {
  authAllowedDomains: [String!]
  sessionLifetimeInDays: Int
}

type UpdateSettingsResponse {
  errors: [Error!]
  settings: Settings
}

type Error {
  code: ErrorCode!
  message: String!
}

enum ErrorCode {
  UNEXPECTED_ERROR
  VALIDATION_ERROR
  BAD_REQUEST
  INTERNAL_SERVER_ERROR
}

type User {
  id: ID!
  email: String!
}

type Alert {
  id: ID!
  type: AlertLevel!
  message: String!
  runtime: Runtime!
}

enum AlertLevel {
  ERROR
  WARNING
}

type ConfigurationVariable {
  id: ID!
  variable: String!
  value: String!
  type: ConfigurationVariableType!
  protected: Boolean!
}

enum ConfigurationVariableType {
  VARIABLE
  FILE
}

input ConfigurationVariablesInput {
  variable: String!
  value: String!
  type: ConfigurationVariableType!
}

input UpdateConfigurationInput {
  id: ID
  configurationVariables: [ConfigurationVariablesInput!]!
}

type UpdateVersionConfigurationResponse {
  errors: [Error!]
  version: Version!
}

type Runtime {
  id: ID!
  name: String!
  status: RuntimeStatus!
  creationDate: String!
  creationAuthor: User!
  activeVersion: Version
}

enum RuntimeStatus {
  CREATING
  RUNNING
  ERROR
}

type Edge {
  id: ID!
  fromNode: ID!
  toNode: ID!
}

type Node {
  id: ID!
  name: String!
  status: NodeStatus!
}

enum NodeStatus {
  ACTIVE
  INACTIVE
  ERROR
}

type Workflow {
  name: String!
  nodes: [Node!]!
  edges: [Edge!]!
}

type Version {
  id: ID!
  name: String!
  description: String!
  status: VersionStatus!
  creationDate: String!
  creationAuthor: User!
  activationDate: String
  activationAuthor: User
  workflows: [Workflow!]!
  configurationVariables: [ConfigurationVariable!]!
  configurationCompleted: Boolean!
}

enum VersionStatus {
  CREATED
  ACTIVE
  RUNNING
  STOPPED
}

type Settings {
  authAllowedDomains: [String!]!
  sessionLifetimeInDays: Int!
}

type UserActivity {
  id: ID!
  user: User!
  message: String!
  date: String!
  type: UserActivityType!
}

enum UserActivityType {
  LOGIN
  LOGOUT
  CREATE_RUNTIME
}
