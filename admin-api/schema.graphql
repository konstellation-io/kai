scalar Upload

type Query {
  me: User
  users: [User!]!
  runtimes: [Runtime!]
  versions(runtimeId: ID!): [Version!]
  alerts: [Alert!]
  settings: Settings!
  userActivityList(
    userEmail: String,
    type: UserActivityType,
    fromDate: String,
    toDate: String,
    lastId: Int
  ): [UserActivity!]!
  runtime(id: ID!): Runtime!
}

type Mutation {
  createRuntime(input: CreateRuntimeInput!): CreateRuntimeResponse!
  createVersion(input: CreateVersionInput!): CreateVersionResponse!
  deployVersion(input: DeployVersionInput!): Version!
  activateVersion(input: ActivateVersionInput!): Version!
  updateSettings(input: SettingsInput!): UpdateSettingsResponse
}

type Subscription {
  runtimeCreated: Runtime!
}

input CreateRuntimeInput {
  name: String!
}

type CreateRuntimeResponse {
  errors: [Error!]
  runtime: Runtime
}

input CreateVersionInput {
  file: Upload!
  runtimeId: String!
}

input DeployVersionInput {
  versionId: ID!
}

input ActivateVersionInput {
  versionId: ID!
}

type CreateVersionResponse {
  errors: [Error!]
  version: Version!
}

input SettingsInput {
  authAllowedDomains: [String!]
  sessionLifetimeInDays: Int
}

type UpdateSettingsResponse {
  errors: [Error!]
  settings: Settings
}

type Error {
  code: ErrorCode!
  message: String!
}

enum ErrorCode {
  UNEXPECTED_ERROR
  VALIDATION_ERROR
  BAD_REQUEST
  INTERNAL_SERVER_ERROR
}


type User {
  id: ID!
  email: String!
}

type Alert {
  id: ID!
  type: AlertLevel!
  message: String!
  runtime: Runtime!
}

enum AlertLevel {
  ERROR
  WARNING
}

type Runtime {
  id: ID!
  name: String!
  status: RuntimeStatus!
  creationDate: String!
  creationAuthor: User!
  versions(status: VersionStatus!): [Version!]!
}

enum RuntimeStatus {
  CREATING
  RUNNING
  ERROR
}

type Edge {
  id: ID!
  fromNode: ID!
  toNode: ID!
}

type Node {
  id: ID!
  name: String!
  status: NodeStatus!
}

enum NodeStatus {
  ACTIVE
  INACTIVE
  ERROR
}

type Workflow {
  name: String!
  nodes: [Node!]!
  edges: [Edge!]!
}

type Version {
  id: ID!
  name: String!
  description: String!
  status: VersionStatus!
  creationDate: String!
  creationAuthor: User!
  activationDate: String!
  activationAuthor: User!
  workflows: [Workflow!]!
}

enum VersionStatus {
  CREATED
  ACTIVE
  RUNNING
  STOPPED
}

type Settings {
  authAllowedDomains: [String!]!
  sessionLifetimeInDays: Int!
}

type UserActivity {
  id: ID!
  user: User!
  message: String!
  date: String!
  type: UserActivityType!
}

enum UserActivityType {
  LOGIN
  LOGOUT
  CREATE_RUNTIME
}
