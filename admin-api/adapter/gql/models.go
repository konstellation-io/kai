// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type ActivateVersionInput struct {
	VersionID string `json:"versionId"`
	Comment   string `json:"comment"`
}

type Alert struct {
	ID      string     `json:"id"`
	Type    AlertLevel `json:"type"`
	Message string     `json:"message"`
	Runtime *Runtime   `json:"runtime"`
}

type CreateRuntimeInput struct {
	Name string `json:"name"`
}

type CreateRuntimeResponse struct {
	Errors  []*Error `json:"errors"`
	Runtime *Runtime `json:"runtime"`
}

type CreateVersionInput struct {
	File      graphql.Upload `json:"file"`
	RuntimeID string         `json:"runtimeId"`
}

type CreateVersionResponse struct {
	Errors  []*Error `json:"errors"`
	Version *Version `json:"version"`
}

type DeployVersionInput struct {
	VersionID string `json:"versionId"`
}

type StopVersionInput struct {
	VersionID string `json:"versionId"`
}

type Edge struct {
	ID       string `json:"id"`
	FromNode string `json:"fromNode"`
	ToNode   string `json:"toNode"`
}

type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

type Node struct {
	ID     string     `json:"id"`
	Name   string     `json:"name"`
	Status NodeStatus `json:"status"`
}

type Runtime struct {
	ID             string        `json:"id"`
	Name           string        `json:"name"`
	Status         RuntimeStatus `json:"status"`
	CreationDate   string        `json:"creationDate"`
	CreationAuthor *User         `json:"creationAuthor"`
	ActiveVersion  *Version      `json:"activeVersion"`
}

type Settings struct {
	AuthAllowedDomains    []string `json:"authAllowedDomains"`
	SessionLifetimeInDays int      `json:"sessionLifetimeInDays"`
}

type SettingsInput struct {
	AuthAllowedDomains    []string `json:"authAllowedDomains"`
	SessionLifetimeInDays *int     `json:"sessionLifetimeInDays"`
}

type UpdateSettingsResponse struct {
	Errors   []*Error  `json:"errors"`
	Settings *Settings `json:"settings"`
}

type User struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type UserActivity struct {
	ID      string           `json:"id"`
	User    *User            `json:"user"`
	Message string           `json:"message"`
	Date    string           `json:"date"`
	Type    UserActivityType `json:"type"`
}

type Version struct {
	ID               string        `json:"id"`
	Name             string        `json:"name"`
	Description      string        `json:"description"`
	Status           VersionStatus `json:"status"`
	CreationDate     string        `json:"creationDate"`
	CreationAuthor   *User         `json:"creationAuthor"`
	ActivationDate   *string       `json:"activationDate"`
	ActivationAuthor *User         `json:"activationAuthor"`
	Workflows        []*Workflow   `json:"workflows"`
}

type Workflow struct {
	Name  string  `json:"name"`
	Nodes []*Node `json:"nodes"`
	Edges []*Edge `json:"edges"`
}

type AlertLevel string

const (
	AlertLevelError   AlertLevel = "ERROR"
	AlertLevelWarning AlertLevel = "WARNING"
)

var AllAlertLevel = []AlertLevel{
	AlertLevelError,
	AlertLevelWarning,
}

func (e AlertLevel) IsValid() bool {
	switch e {
	case AlertLevelError, AlertLevelWarning:
		return true
	}
	return false
}

func (e AlertLevel) String() string {
	return string(e)
}

func (e *AlertLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertLevel", str)
	}
	return nil
}

func (e AlertLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ErrorCode string

const (
	ErrorCodeUnexpectedError     ErrorCode = "UNEXPECTED_ERROR"
	ErrorCodeValidationError     ErrorCode = "VALIDATION_ERROR"
	ErrorCodeBadRequest          ErrorCode = "BAD_REQUEST"
	ErrorCodeInternalServerError ErrorCode = "INTERNAL_SERVER_ERROR"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeUnexpectedError,
	ErrorCodeValidationError,
	ErrorCodeBadRequest,
	ErrorCodeInternalServerError,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeUnexpectedError, ErrorCodeValidationError, ErrorCodeBadRequest, ErrorCodeInternalServerError:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NodeStatus string

const (
	NodeStatusActive   NodeStatus = "ACTIVE"
	NodeStatusInactive NodeStatus = "INACTIVE"
	NodeStatusError    NodeStatus = "ERROR"
)

var AllNodeStatus = []NodeStatus{
	NodeStatusActive,
	NodeStatusInactive,
	NodeStatusError,
}

func (e NodeStatus) IsValid() bool {
	switch e {
	case NodeStatusActive, NodeStatusInactive, NodeStatusError:
		return true
	}
	return false
}

func (e NodeStatus) String() string {
	return string(e)
}

func (e *NodeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NodeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NodeStatus", str)
	}
	return nil
}

func (e NodeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RuntimeStatus string

const (
	RuntimeStatusCreating RuntimeStatus = "CREATING"
	RuntimeStatusRunning  RuntimeStatus = "RUNNING"
	RuntimeStatusError    RuntimeStatus = "ERROR"
)

var AllRuntimeStatus = []RuntimeStatus{
	RuntimeStatusCreating,
	RuntimeStatusRunning,
	RuntimeStatusError,
}

func (e RuntimeStatus) IsValid() bool {
	switch e {
	case RuntimeStatusCreating, RuntimeStatusRunning, RuntimeStatusError:
		return true
	}
	return false
}

func (e RuntimeStatus) String() string {
	return string(e)
}

func (e *RuntimeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RuntimeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RuntimeStatus", str)
	}
	return nil
}

func (e RuntimeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserActivityType string

const (
	UserActivityTypeLogin         UserActivityType = "LOGIN"
	UserActivityTypeLogout        UserActivityType = "LOGOUT"
	UserActivityTypeCreateRuntime UserActivityType = "CREATE_RUNTIME"
)

var AllUserActivityType = []UserActivityType{
	UserActivityTypeLogin,
	UserActivityTypeLogout,
	UserActivityTypeCreateRuntime,
}

func (e UserActivityType) IsValid() bool {
	switch e {
	case UserActivityTypeLogin, UserActivityTypeLogout, UserActivityTypeCreateRuntime:
		return true
	}
	return false
}

func (e UserActivityType) String() string {
	return string(e)
}

func (e *UserActivityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserActivityType", str)
	}
	return nil
}

func (e UserActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VersionStatus string

const (
	VersionStatusCreated VersionStatus = "CREATED"
	VersionStatusActive  VersionStatus = "ACTIVE"
	VersionStatusRunning VersionStatus = "RUNNING"
	VersionStatusStopped VersionStatus = "STOPPED"
)

var AllVersionStatus = []VersionStatus{
	VersionStatusCreated,
	VersionStatusActive,
	VersionStatusRunning,
	VersionStatusStopped,
}

func (e VersionStatus) IsValid() bool {
	switch e {
	case VersionStatusCreated, VersionStatusActive, VersionStatusRunning, VersionStatusStopped:
		return true
	}
	return false
}

func (e VersionStatus) String() string {
	return string(e)
}

func (e *VersionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VersionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VersionStatus", str)
	}
	return nil
}

func (e VersionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
