# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: public_input.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.client
import grpclib.const

if typing.TYPE_CHECKING:
  import grpclib.server

import public_input_pb2


class EntrypointBase(abc.ABC):

  @abc.abstractmethod
  async def Greet(self, stream: 'grpclib.server.Stream[public_input_pb2.Request, public_input_pb2.Response]') -> None:
    pass

  @abc.abstractmethod
  async def Salute(self, stream: 'grpclib.server.Stream[public_input_pb2.Request, public_input_pb2.Response]') -> None:
    pass

  def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
    return {
      '/entrypoint.Entrypoint/Greet': grpclib.const.Handler(
        self.Greet,
        grpclib.const.Cardinality.UNARY_UNARY,
        public_input_pb2.Request,
        public_input_pb2.Response,
      ),
      '/entrypoint.Entrypoint/Salute': grpclib.const.Handler(
        self.Salute,
        grpclib.const.Cardinality.UNARY_UNARY,
        public_input_pb2.Request,
        public_input_pb2.Response,
      ),
    }


class EntrypointStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
      self.Greet = grpclib.client.UnaryUnaryMethod(
        channel,
        '/entrypoint.Entrypoint/Greet',
        public_input_pb2.Request,
        public_input_pb2.Response,
      )
      self.Salute = grpclib.client.UnaryUnaryMethod(
        channel,
        '/entrypoint.Entrypoint/Salute',
        public_input_pb2.Request,
        public_input_pb2.Response,
      )
