@import 'Styles/variables';
@import 'Styles/colors';
@import 'Styles/mixins';

$color-line: #5d6c76;
$color-label-bg: palette(base, 400);
$color-label-border: palette(base, 200);
$color-node-bg: palette(base, 600);

$small-radius: 2 * $grid-unit;
$big-radius: 2 * $small-radius;

$animation-duration: 0.8s;
@mixin animate($field) {
  transition: $field ease $animation-duration;
}

.node {
  .circlesG {
    &:hover {
      filter: url('#glow');

      + g.labelG {
        .nodeLabel {
          fill: font-color(white);
        }

        line {
          stroke: white;
        }
        rect {
          filter: url('#glowLow');
        }
        text {
          fill: font-color(white);
        }
      }
    }
  }
  .innerCircle {
    pointer-events: none;
    @include animate(fill);
  }
  .outerCircle {
    fill: $color-node-bg;
    cursor: pointer;
    @include animate(stroke);
  }

  &.#{$status-down} {
    .innerCircle {
      fill: $color-status-down;

      animation: anim-down 0.4s ease;
    }
    .outerCircle {
      stroke: $color-status-down;
    }

    .animOuterCircle {
      fill: $color-status-down;
      animation: anim-bg 0.6s ease;
    }
  }
  &.#{$status-loading} {
    .innerCircle {
      fill: $color-status-changing;

      animation: anim-state-change 2.5s linear 0s infinite;
    }
    .outerCircle {
      stroke: $color-status-changing;
    }
  }
  &.#{$status-up} {
    .innerCircle {
      fill: $color-status-up;

      animation: anim-up 0.6s ease;
    }
    .outerCircle {
      stroke: $color-status-up;
    }

    .animOuterCircle {
      fill: $color-status-up;
      animation: anim-bg 0.6s ease;
    }
  }
  &.#{$status-error} {
    .innerCircle {
      fill: $color-status-error;

      animation: anim-error 0.4s ease;
    }
    .outerCircle {
      stroke: $color-status-error;
    }

    .animOuterCircle {
      fill: $color-status-error;
      animation: anim-bg-err 0.3s ease, anim-bg-err 0.3s ease 0.15s;
    }
  }
}

@mixin set-fill($selector, $color) {
  #{$selector} {
    fill: $color;
  }
}
@mixin set-border($selector, $color) {
  #{$selector} {
    stroke: $color;
    fill: $bg-box;
  }
}

@mixin entrypoint($fill-selector, $border-selector) {
  // Default style
  #{$fill-selector} {
    @include animate(fill);
    fill: $bg-box;
    stroke: transparent;
  }

  // Icon styles
  .icon > svg > path {
    @include animate(stroke);
    stroke: transparent !important;
    fill: font-color(lowlight);
  }
  &.#{$status-up},
  &.#{$status-error} {
    .icon > svg > path {
      fill: font-color(dark);
    }
  }
  &.#{$status-down},
  &.#{$status-ready} {
    .icon > svg > path {
      fill: $color-status-down;
    }
  }

  // Shape styles
  &.#{$status-up} {
    @include set-fill($fill-selector, $color-status-up);
  }
  &.#{$status-error} {
    @include set-fill($fill-selector, $color-error);
  }

  &.#{$status-ready} {
    @include set-border($border-selector, $color-status-up);
  }
  &.#{$status-down} {
    @include set-border($border-selector, $color-status-down);
  }
  &.#{$status-loading} {
    @include set-border($border-selector, $color-status-changing);

    .icon > svg > path {
      fill: $color-status-changing;
      animation: anim-state-change 2.5s linear 0s infinite;
    }
  }

  @content;
}

.inputNode {
  $fill-selector: '.shape, .nodePeak, .peakCut';
  $border-selector: '.shape, .nodePeak';

  @include entrypoint($fill-selector, $border-selector) {
    cursor: pointer;

    &.hovered {
      filter: url('#glow');
    }
  }
}

.outputNode {
  $fill-selector: '.shape';
  $border-selector: '.shape, .nodePeak';

  @include entrypoint($fill-selector, $border-selector) {
    .peakCut,
    .nodePeak {
      fill: $bg-box;
    }
  }
}

.nodeLabel {
  @include font-small;

  fill: font-color(lowlight);
  transition: fill ease 0.4s;
  text-anchor: middle;
}

.nodeLabelRect {
  fill: $color-label-bg;
  stroke: $color-label-border;
  rx: 4px;
}
.nodeLabelLine {
  stroke: $color-line;
  stroke-dasharray: 2.5;
}

.nodesG,
.edgesG,
.node,
.inputNode,
.outputNode,
.lineG,
.line,
.path,
.innerCircle {
  display: block;
}
.lineG {
  line {
    stroke-dasharray: 5;
  }
  line,
  path {
    @include animate(stroke);
  }

  &.#{$status-down} {
    line,
    path {
      stroke: $color-status-down;
    }
  }
  &.#{$status-up} {
    line,
    path {
      stroke: $color-status-up;
    }
  }
  &.#{$status-error} {
    line,
    path {
      stroke: $color-status-error;
    }
  }
}

.clicksDisabled {
  cursor: default !important;
}

$bg-animations: anim-bg, anim-bg-err;
@each $bg-animation in $bg-animations {
  @keyframes #{$bg-animation} {
    0% {
      r: $big-radius;
      fill-opacity: 0.4;
    }
    100% {
      r: $big-radius + $grid-unit;
      fill-opacity: 0;
    }
  }
}

$state-animations: (
  'anim-up': 2px,
  'anim-down': -1px,
  'anim-error': -1px
);
@each $state-animation, $dr in $state-animations {
  @keyframes #{$state-animation} {
    0% {
      r: $small-radius;
    }
    50% {
      r: $small-radius + $dr;
    }
    100% {
      r: $small-radius;
    }
  }
}

@keyframes anim-state-change {
  0% {
    fill-opacity: 0.8;
  }
  50% {
    fill-opacity: 0.3;
  }
  100% {
    fill-opacity: 0.8;
  }
}
