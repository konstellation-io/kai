// Code generated by MockGen. DO NOT EDIT.
// Source: version.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockVersionRepo is a mock of VersionRepo interface.
type MockVersionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVersionRepoMockRecorder
}

// MockVersionRepoMockRecorder is the mock recorder for MockVersionRepo.
type MockVersionRepoMockRecorder struct {
	mock *MockVersionRepo
}

// NewMockVersionRepo creates a new mock instance.
func NewMockVersionRepo(ctrl *gomock.Controller) *MockVersionRepo {
	mock := &MockVersionRepo{ctrl: ctrl}
	mock.recorder = &MockVersionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionRepo) EXPECT() *MockVersionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVersionRepo) Create(userEmail, productID string, version *entity.Version) (*entity.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userEmail, productID, version)
	ret0, _ := ret[0].(*entity.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVersionRepoMockRecorder) Create(userEmail, productID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVersionRepo)(nil).Create), userEmail, productID, version)
}

// CreateIndexes mocks base method.
func (m *MockVersionRepo) CreateIndexes(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockVersionRepoMockRecorder) CreateIndexes(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockVersionRepo)(nil).CreateIndexes), ctx, productID)
}

// GetByTag mocks base method.
func (m *MockVersionRepo) GetByTag(ctx context.Context, productID, tag string) (*entity.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTag", ctx, productID, tag)
	ret0, _ := ret[0].(*entity.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTag indicates an expected call of GetByTag.
func (mr *MockVersionRepoMockRecorder) GetByTag(ctx, productID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTag", reflect.TypeOf((*MockVersionRepo)(nil).GetByTag), ctx, productID, tag)
}

// ListVersionsByProduct mocks base method.
func (m *MockVersionRepo) ListVersionsByProduct(ctx context.Context, productID string) ([]*entity.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsByProduct", ctx, productID)
	ret0, _ := ret[0].([]*entity.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsByProduct indicates an expected call of ListVersionsByProduct.
func (mr *MockVersionRepoMockRecorder) ListVersionsByProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsByProduct", reflect.TypeOf((*MockVersionRepo)(nil).ListVersionsByProduct), ctx, productID)
}

// SetError mocks base method.
func (m *MockVersionRepo) SetError(ctx context.Context, productID string, version *entity.Version, errorMessage string) (*entity.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", ctx, productID, version, errorMessage)
	ret0, _ := ret[0].(*entity.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetError indicates an expected call of SetError.
func (mr *MockVersionRepoMockRecorder) SetError(ctx, productID, version, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockVersionRepo)(nil).SetError), ctx, productID, version, errorMessage)
}

// SetStatus mocks base method.
func (m *MockVersionRepo) SetStatus(ctx context.Context, productID, versionTag string, status entity.VersionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, productID, versionTag, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockVersionRepoMockRecorder) SetStatus(ctx, productID, versionTag, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockVersionRepo)(nil).SetStatus), ctx, productID, versionTag, status)
}

// Update mocks base method.
func (m *MockVersionRepo) Update(productID string, version *entity.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", productID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVersionRepoMockRecorder) Update(productID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVersionRepo)(nil).Update), productID, version)
}
