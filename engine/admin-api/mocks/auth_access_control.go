// Code generated by MockGen. DO NOT EDIT.
// Source: access_control.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
	auth "github.com/konstellation-io/kai/engine/admin-api/domain/usecase/auth"
)

// MockAccessControl is a mock of AccessControl interface.
type MockAccessControl struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlMockRecorder
}

// MockAccessControlMockRecorder is the mock recorder for MockAccessControl.
type MockAccessControlMockRecorder struct {
	mock *MockAccessControl
}

// NewMockAccessControl creates a new mock instance.
func NewMockAccessControl(ctrl *gomock.Controller) *MockAccessControl {
	mock := &MockAccessControl{ctrl: ctrl}
	mock.recorder = &MockAccessControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControl) EXPECT() *MockAccessControlMockRecorder {
	return m.recorder
}

// CheckProductGrants mocks base method.
func (m *MockAccessControl) CheckProductGrants(user *entity.User, product string, action auth.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductGrants", user, product, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckProductGrants indicates an expected call of CheckProductGrants.
func (mr *MockAccessControlMockRecorder) CheckProductGrants(user, product, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductGrants", reflect.TypeOf((*MockAccessControl)(nil).CheckProductGrants), user, product, action)
}

// CheckRoleGrants mocks base method.
func (m *MockAccessControl) CheckRoleGrants(user *entity.User, action auth.Action) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRoleGrants", user, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRoleGrants indicates an expected call of CheckRoleGrants.
func (mr *MockAccessControlMockRecorder) CheckRoleGrants(user, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRoleGrants", reflect.TypeOf((*MockAccessControl)(nil).CheckRoleGrants), user, action)
}

// GetUserProducts mocks base method.
func (m *MockAccessControl) GetUserProducts(user *entity.User) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProducts", user)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUserProducts indicates an expected call of GetUserProducts.
func (mr *MockAccessControlMockRecorder) GetUserProducts(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProducts", reflect.TypeOf((*MockAccessControl)(nil).GetUserProducts), user)
}

// IsAdmin mocks base method.
func (m *MockAccessControl) IsAdmin(user *entity.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockAccessControlMockRecorder) IsAdmin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAccessControl)(nil).IsAdmin), user)
}
