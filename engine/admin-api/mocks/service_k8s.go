// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockK8sService is a mock of K8sService interface.
type MockK8sService struct {
	ctrl     *gomock.Controller
	recorder *MockK8sServiceMockRecorder
}

// MockK8sServiceMockRecorder is the mock recorder for MockK8sService.
type MockK8sServiceMockRecorder struct {
	mock *MockK8sService
}

// NewMockK8sService creates a new mock instance.
func NewMockK8sService(ctrl *gomock.Controller) *MockK8sService {
	mock := &MockK8sService{ctrl: ctrl}
	mock.recorder = &MockK8sServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sService) EXPECT() *MockK8sServiceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockK8sService) Publish(ctx context.Context, productID string, version *entity.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, productID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockK8sServiceMockRecorder) Publish(ctx, productID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockK8sService)(nil).Publish), ctx, productID, version)
}

// RegisterProcess mocks base method.
func (m *MockK8sService) RegisterProcess(ctx context.Context, product, version, process string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProcess", ctx, product, version, process, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProcess indicates an expected call of RegisterProcess.
func (mr *MockK8sServiceMockRecorder) RegisterProcess(ctx, product, version, process, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProcess", reflect.TypeOf((*MockK8sService)(nil).RegisterProcess), ctx, product, version, process, file)
}

// Start mocks base method.
func (m *MockK8sService) Start(ctx context.Context, productID string, version *entity.Version, versionConfig *entity.VersionConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, productID, version, versionConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockK8sServiceMockRecorder) Start(ctx, productID, version, versionConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockK8sService)(nil).Start), ctx, productID, version, versionConfig)
}

// Stop mocks base method.
func (m *MockK8sService) Stop(ctx context.Context, productID string, version *entity.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, productID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockK8sServiceMockRecorder) Stop(ctx, productID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockK8sService)(nil).Stop), ctx, productID, version)
}

// Unpublish mocks base method.
func (m *MockK8sService) Unpublish(ctx context.Context, productID string, version *entity.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpublish", ctx, productID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpublish indicates an expected call of Unpublish.
func (mr *MockK8sServiceMockRecorder) Unpublish(ctx, productID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpublish", reflect.TypeOf((*MockK8sService)(nil).Unpublish), ctx, productID, version)
}

// WatchProcessStatus mocks base method.
func (m *MockK8sService) WatchProcessStatus(ctx context.Context, productID, versionTag string) (<-chan *entity.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProcessStatus", ctx, productID, versionTag)
	ret0, _ := ret[0].(<-chan *entity.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProcessStatus indicates an expected call of WatchProcessStatus.
func (mr *MockK8sServiceMockRecorder) WatchProcessStatus(ctx, productID, versionTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProcessStatus", reflect.TypeOf((*MockK8sService)(nil).WatchProcessStatus), ctx, productID, versionTag)
}
