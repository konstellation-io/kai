// Code generated by MockGen. DO NOT EDIT.
// Source: process_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockRegisteredProcessRepo is a mock of RegisteredProcessRepo interface.
type MockRegisteredProcessRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRegisteredProcessRepoMockRecorder
}

// MockRegisteredProcessRepoMockRecorder is the mock recorder for MockRegisteredProcessRepo.
type MockRegisteredProcessRepoMockRecorder struct {
	mock *MockRegisteredProcessRepo
}

// NewMockRegisteredProcessRepo creates a new mock instance.
func NewMockRegisteredProcessRepo(ctrl *gomock.Controller) *MockRegisteredProcessRepo {
	mock := &MockRegisteredProcessRepo{ctrl: ctrl}
	mock.recorder = &MockRegisteredProcessRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisteredProcessRepo) EXPECT() *MockRegisteredProcessRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegisteredProcessRepo) Create(productID string, newRegisteredProcess *entity.RegisteredProcess) (*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", productID, newRegisteredProcess)
	ret0, _ := ret[0].(*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegisteredProcessRepoMockRecorder) Create(productID, newRegisteredProcess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegisteredProcessRepo)(nil).Create), productID, newRegisteredProcess)
}

// CreateIndexes mocks base method.
func (m *MockRegisteredProcessRepo) CreateIndexes(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockRegisteredProcessRepoMockRecorder) CreateIndexes(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockRegisteredProcessRepo)(nil).CreateIndexes), ctx, productID)
}

// ListByProductAndType mocks base method.
func (m *MockRegisteredProcessRepo) ListByProductAndType(ctx context.Context, productID, processType string) ([]*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProductAndType", ctx, productID, processType)
	ret0, _ := ret[0].([]*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProductAndType indicates an expected call of ListByProductAndType.
func (mr *MockRegisteredProcessRepoMockRecorder) ListByProductAndType(ctx, productID, processType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProductAndType", reflect.TypeOf((*MockRegisteredProcessRepo)(nil).ListByProductAndType), ctx, productID, processType)
}
