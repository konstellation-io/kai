// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPredictionRepo is an autogenerated mock type for the PredictionRepository type
type MockPredictionRepo struct {
	mock.Mock
}

type MockPredictionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPredictionRepo) EXPECT() *MockPredictionRepo_Expecter {
	return &MockPredictionRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, product, username, password
func (_m *MockPredictionRepo) CreateUser(ctx context.Context, product string, username string, password string) error {
	ret := _m.Called(ctx, product, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, product, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPredictionRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockPredictionRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - username string
//   - password string
func (_e *MockPredictionRepo_Expecter) CreateUser(ctx interface{}, product interface{}, username interface{}, password interface{}) *MockPredictionRepo_CreateUser_Call {
	return &MockPredictionRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, product, username, password)}
}

func (_c *MockPredictionRepo_CreateUser_Call) Run(run func(ctx context.Context, product string, username string, password string)) *MockPredictionRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPredictionRepo_CreateUser_Call) Return(_a0 error) *MockPredictionRepo_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredictionRepo_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockPredictionRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, username
func (_m *MockPredictionRepo) DeleteUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPredictionRepo_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockPredictionRepo_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockPredictionRepo_Expecter) DeleteUser(ctx interface{}, username interface{}) *MockPredictionRepo_DeleteUser_Call {
	return &MockPredictionRepo_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, username)}
}

func (_c *MockPredictionRepo_DeleteUser_Call) Run(run func(ctx context.Context, username string)) *MockPredictionRepo_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPredictionRepo_DeleteUser_Call) Return(_a0 error) *MockPredictionRepo_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPredictionRepo_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockPredictionRepo_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPredictionRepo creates a new instance of MockPredictionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPredictionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPredictionRepo {
	mock := &MockPredictionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
