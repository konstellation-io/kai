// Code generated by MockGen. DO NOT EDIT.
// Source: processlog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockProcessLogRepository is a mock of ProcessLogRepository interface.
type MockProcessLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessLogRepositoryMockRecorder
}

// MockProcessLogRepositoryMockRecorder is the mock recorder for MockProcessLogRepository.
type MockProcessLogRepositoryMockRecorder struct {
	mock *MockProcessLogRepository
}

// NewMockProcessLogRepository creates a new mock instance.
func NewMockProcessLogRepository(ctrl *gomock.Controller) *MockProcessLogRepository {
	mock := &MockProcessLogRepository{ctrl: ctrl}
	mock.recorder = &MockProcessLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLogRepository) EXPECT() *MockProcessLogRepositoryMockRecorder {
	return m.recorder
}

// CreateIndexes mocks base method.
func (m *MockProcessLogRepository) CreateIndexes(ctx context.Context, runtimeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", ctx, runtimeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockProcessLogRepositoryMockRecorder) CreateIndexes(ctx, runtimeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockProcessLogRepository)(nil).CreateIndexes), ctx, runtimeID)
}

// PaginatedSearch mocks base method.
func (m *MockProcessLogRepository) PaginatedSearch(ctx context.Context, runtimeID string, searchOpts *entity.SearchLogsOptions) (*entity.SearchLogsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginatedSearch", ctx, runtimeID, searchOpts)
	ret0, _ := ret[0].(*entity.SearchLogsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginatedSearch indicates an expected call of PaginatedSearch.
func (mr *MockProcessLogRepositoryMockRecorder) PaginatedSearch(ctx, runtimeID, searchOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginatedSearch", reflect.TypeOf((*MockProcessLogRepository)(nil).PaginatedSearch), ctx, runtimeID, searchOpts)
}

// WatchProcessLogs mocks base method.
func (m *MockProcessLogRepository) WatchProcessLogs(ctx context.Context, runtimeID, versionTag string, filters entity.LogFilters) (<-chan *entity.ProcessLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProcessLogs", ctx, runtimeID, versionTag, filters)
	ret0, _ := ret[0].(<-chan *entity.ProcessLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProcessLogs indicates an expected call of WatchProcessLogs.
func (mr *MockProcessLogRepositoryMockRecorder) WatchProcessLogs(ctx, runtimeID, versionTag, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProcessLogs", reflect.TypeOf((*MockProcessLogRepository)(nil).WatchProcessLogs), ctx, runtimeID, versionTag, filters)
}
