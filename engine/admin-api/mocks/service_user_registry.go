// Code generated by MockGen. DO NOT EDIT.
// Source: user_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockUserRegistry is a mock of UserRegistry interface.
type MockUserRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistryMockRecorder
}

// MockUserRegistryMockRecorder is the mock recorder for MockUserRegistry.
type MockUserRegistryMockRecorder struct {
	mock *MockUserRegistry
}

// NewMockUserRegistry creates a new mock instance.
func NewMockUserRegistry(ctrl *gomock.Controller) *MockUserRegistry {
	mock := &MockUserRegistry{ctrl: ctrl}
	mock.recorder = &MockUserRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegistry) EXPECT() *MockUserRegistryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserRegistry) GetUserByID(userID string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRegistryMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRegistry)(nil).GetUserByID), userID)
}

// UpdateUserProductPermissions mocks base method.
func (m *MockUserRegistry) UpdateUserProductPermissions(userID, product string, permissions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProductPermissions", userID, product, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProductPermissions indicates an expected call of UpdateUserProductPermissions.
func (mr *MockUserRegistryMockRecorder) UpdateUserProductPermissions(userID, product, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProductPermissions", reflect.TypeOf((*MockUserRegistry)(nil).UpdateUserProductPermissions), userID, product, permissions)
}
