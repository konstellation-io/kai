// Code generated by MockGen. DO NOT EDIT.
// Source: user_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRegistry is a mock of UserRegistry interface.
type MockUserRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistryMockRecorder
}

// MockUserRegistryMockRecorder is the mock recorder for MockUserRegistry.
type MockUserRegistryMockRecorder struct {
	mock *MockUserRegistry
}

// NewMockUserRegistry creates a new mock instance.
func NewMockUserRegistry(ctrl *gomock.Controller) *MockUserRegistry {
	mock := &MockUserRegistry{ctrl: ctrl}
	mock.recorder = &MockUserRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegistry) EXPECT() *MockUserRegistryMockRecorder {
	return m.recorder
}

// CreateGroupWithPolicy mocks base method.
func (m *MockUserRegistry) CreateGroupWithPolicy(ctx context.Context, name, policy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupWithPolicy", ctx, name, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroupWithPolicy indicates an expected call of CreateGroupWithPolicy.
func (mr *MockUserRegistryMockRecorder) CreateGroupWithPolicy(ctx, name, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithPolicy", reflect.TypeOf((*MockUserRegistry)(nil).CreateGroupWithPolicy), ctx, name, policy)
}

// CreateUserWithinGroup mocks base method.
func (m *MockUserRegistry) CreateUserWithinGroup(ctx context.Context, name, password, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithinGroup", ctx, name, password, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWithinGroup indicates an expected call of CreateUserWithinGroup.
func (mr *MockUserRegistryMockRecorder) CreateUserWithinGroup(ctx, name, password, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithinGroup", reflect.TypeOf((*MockUserRegistry)(nil).CreateUserWithinGroup), ctx, name, password, group)
}

// UpdateUserProductGrants mocks base method.
func (m *MockUserRegistry) UpdateUserProductGrants(ctx context.Context, userID, product string, grants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProductGrants", ctx, userID, product, grants)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProductGrants indicates an expected call of UpdateUserProductGrants.
func (mr *MockUserRegistryMockRecorder) UpdateUserProductGrants(ctx, userID, product, grants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProductGrants", reflect.TypeOf((*MockUserRegistry)(nil).UpdateUserProductGrants), ctx, userID, product, grants)
}
