// Code generated by MockGen. DO NOT EDIT.
// Source: gocloak.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockGocloakService is a mock of GocloakService interface.
type MockGocloakService struct {
	ctrl     *gomock.Controller
	recorder *MockGocloakServiceMockRecorder
}

// MockGocloakServiceMockRecorder is the mock recorder for MockGocloakService.
type MockGocloakServiceMockRecorder struct {
	mock *MockGocloakService
}

// NewMockGocloakService creates a new mock instance.
func NewMockGocloakService(ctrl *gomock.Controller) *MockGocloakService {
	mock := &MockGocloakService{ctrl: ctrl}
	mock.recorder = &MockGocloakServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGocloakService) EXPECT() *MockGocloakServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockGocloakService) CreateUser(userData entity.UserGocloakData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGocloakServiceMockRecorder) CreateUser(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGocloakService)(nil).CreateUser), userData)
}

// GetUserByID mocks base method.
func (m *MockGocloakService) GetUserByID(userID string) (entity.UserGocloakData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(entity.UserGocloakData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockGocloakServiceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGocloakService)(nil).GetUserByID), userID)
}

// UpdateUserProductPermissions mocks base method.
func (m *MockGocloakService) UpdateUserProductPermissions(userID, product string, roles []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProductPermissions", userID, product, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProductPermissions indicates an expected call of UpdateUserProductPermissions.
func (mr *MockGocloakServiceMockRecorder) UpdateUserProductPermissions(userID, product, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProductPermissions", reflect.TypeOf((*MockGocloakService)(nil).UpdateUserProductPermissions), userID, product, roles)
}
