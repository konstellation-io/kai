// Code generated by MockGen. DO NOT EDIT.
// Source: process_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kai/engine/admin-api/domain/entity"
)

// MockProcessRepository is a mock of ProcessRepository interface.
type MockProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessRepositoryMockRecorder
}

// MockProcessRepositoryMockRecorder is the mock recorder for MockProcessRepository.
type MockProcessRepositoryMockRecorder struct {
	mock *MockProcessRepository
}

// NewMockProcessRepository creates a new mock instance.
func NewMockProcessRepository(ctrl *gomock.Controller) *MockProcessRepository {
	mock := &MockProcessRepository{ctrl: ctrl}
	mock.recorder = &MockProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessRepository) EXPECT() *MockProcessRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProcessRepository) Create(productID string, newRegisteredProcess *entity.RegisteredProcess) (*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", productID, newRegisteredProcess)
	ret0, _ := ret[0].(*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProcessRepositoryMockRecorder) Create(productID, newRegisteredProcess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProcessRepository)(nil).Create), productID, newRegisteredProcess)
}

// CreateIndexes mocks base method.
func (m *MockProcessRepository) CreateIndexes(ctx context.Context, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexes", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexes indicates an expected call of CreateIndexes.
func (mr *MockProcessRepositoryMockRecorder) CreateIndexes(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexes", reflect.TypeOf((*MockProcessRepository)(nil).CreateIndexes), ctx, productID)
}

// GetByID mocks base method.
func (m *MockProcessRepository) GetByID(ctx context.Context, productID, imageID string) (*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, productID, imageID)
	ret0, _ := ret[0].(*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProcessRepositoryMockRecorder) GetByID(ctx, productID, imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProcessRepository)(nil).GetByID), ctx, productID, imageID)
}

// ListByProductAndType mocks base method.
func (m *MockProcessRepository) ListByProductAndType(ctx context.Context, productID, processType string) ([]*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProductAndType", ctx, productID, processType)
	ret0, _ := ret[0].([]*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProductAndType indicates an expected call of ListByProductAndType.
func (mr *MockProcessRepositoryMockRecorder) ListByProductAndType(ctx, productID, processType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProductAndType", reflect.TypeOf((*MockProcessRepository)(nil).ListByProductAndType), ctx, productID, processType)
}

// Update mocks base method.
func (m *MockProcessRepository) Update(productID string, newRegisteredProcess *entity.RegisteredProcess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", productID, newRegisteredProcess)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProcessRepositoryMockRecorder) Update(productID, newRegisteredProcess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProcessRepository)(nil).Update), productID, newRegisteredProcess)
}
