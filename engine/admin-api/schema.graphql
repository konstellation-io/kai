scalar Upload

type Query {
  product(id: ID!): Product!
  products: [Product!]!
  version(name: String!, productID: ID!): Version!
  versions(productID: ID!): [Version!]!
  registeredProcesses(productID: ID!, processType: String): [RegisteredProcess]!
  userActivityList(
    userEmail: String
    types: [UserActivityType!]
    versionIds: [String!]
    fromDate: String
    toDate: String
    lastId: String
  ): [UserActivity!]!
  logs(productID: ID!, filters: LogFilters!, cursor: String): LogPage!
  metrics(
    productID: ID!
    versionTag: String!
    startDate: String!
    endDate: String!
  ): Metrics
  serverInfo: ServerInfo!
}

type ServerInfo {
  components: [ComponentInfo!]!
}

type ComponentInfo {
  name: String!
  version: String!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  createVersion(input: CreateVersionInput!): Version!
  startVersion(input: StartVersionInput!): Version!
  stopVersion(input: StopVersionInput!): Version!
  publishVersion(input: PublishVersionInput!): Version!
  unpublishVersion(input: UnpublishVersionInput!): Version!
  updateUserProductGrants(input: UpdateUserProductGrantsInput!): User!
  revokeUserProductGrants(input: RevokeUserProductGrantsInput!): User!
  registerProcess(input: RegisterProcessInput!): RegisteredProcess!
}

type RegisteredProcess {
  id: ID!
  name: String!
  version: String!
  type: String!
  image: String!
  uploadDate: String!
  owner: String!
  status: String!
}

type User {
  id: ID!
}

type Subscription {
  watchProcessLogs(
    productID: ID!
    versionTag: String!
    filters: LogFilters!
  ): ProcessLog!
}

input CreateProductInput {
  id: String!
  name: String!
  description: String!
}

input CreateVersionInput {
  file: Upload!
  productID: ID!
}

input RegisterProcessInput {
  file: Upload!
  version: String!
  productID: ID!
  processID: ID!
  processType: String!
}

input StartVersionInput {
  versionTag: String!
  comment: String!
  productID: ID!
}

input StopVersionInput {
  versionTag: String!
  comment: String!
  productID: ID!
}

input PublishVersionInput {
  versionTag: String!
  comment: String!
  productID: ID!
}

input UnpublishVersionInput {
  versionTag: String!
  comment: String!
  productID: ID!
}

input UpdateUserProductGrantsInput {
  targetID: ID!
  product: String!
  grants: [String!]!
  comment: String
}

input RevokeUserProductGrantsInput {
  targetID: ID!
  product: String!
  comment: String
}

type ConfigurationVariable {
  key: String!
  value: String!
}

type Product {
  id: ID!
  name: String!
  description: String!
  measurementsUrl: String!
  databaseUrl: String!
  entrypointAddress: String!
  publishedVersion: Version
  creationAuthor: String!
  creationDate: String!
}

type Version {
  id: ID!
  tag: String!
  description: String!
  config: [ConfigurationVariable]
  workflows: [Workflow!]!
  creationDate: String!
  creationAuthor: String!
  publicationDate: String
  publicationAuthor: String
  status: VersionStatus!
  errors: [String]
}

enum VersionStatus {
  CREATING
  CREATED
  STARTING
  STARTED
  PUBLISHED
  STOPPING
  STOPPED
  ERROR
}

type Workflow {
  name: String!
  type: WorkflowType!
  config: [ConfigurationVariable]
  processes: [Process!]!
}

enum WorkflowType {
  DATA
  TRAINING
  FEEDBACK
  SERVING
}

type Process {
  name: String!
  type: ProcessType!
  image: String!
  replicas: Int!
  gpu: Boolean!
  config: [ConfigurationVariable]
  secrets: [ConfigurationVariable]
  subscriptions: [String!]!
  status: ProcessStatus!
}

enum ProcessType {
  TRIGGER
  TASK
  EXIT
}

enum ProcessStatus {
  STARTING
  STARTED
  STOPPED
  ERROR
}

type UserActivityVar {
  key: String!
  value: String!
}

type UserActivity {
  id: ID!
  type: UserActivityType!
  user: String!
  date: String!
  vars: [UserActivityVar!]!
}

enum UserActivityType {
  LOGIN
  LOGOUT
  CREATE_RUNTIME
  CREATE_VERSION
  PUBLISH_VERSION
  UNPUBLISH_VERSION
  START_VERSION
  STOP_VERSION
  UPDATE_SETTING
  UPDATE_VERSION_CONFIGURATION
  CREATE_USER
  REMOVE_USERS
  UPDATE_PRODUCT_GRANTS
}

input LogFilters {
  startDate: String!
  endDate: String
  search: String
  levels: [LogLevel!]
  processIds: [ID!]
  versionsIds: [ID!]
  workflowsNames: [ID!]
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

type ProcessLog {
  id: ID!
  date: String!
  processId: String
  processName: String
  workflowId: String
  workflowName: String
  message: String!
  level: LogLevel!
}

type LogPage {
  cursor: String
  items: [ProcessLog!]!
}

type Metrics {
  values: MetricsValues!
  charts: MetricsCharts!
}

type MetricsValues {
  accuracy: MetricsAccuracy!
  missing: Int!
  newLabels: Int!
}

type MetricsAccuracy {
  total: Int!
  micro: Int!
  macro: Int!
  weighted: Int!
}

type MetricsCharts {
  confusionMatrix: [MetricChartData!]!
  seriesAccuracy: [MetricChartData!]!
  seriesRecall: [MetricChartData!]!
  seriesSupport: [MetricChartData!]!
  successVsFails: [MetricChartData!]!
}

type MetricChartData {
  x: String!
  y: String!
  z: String!
}
