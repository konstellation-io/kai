scalar Upload

type Query {
  runtime(id: ID!): Runtime!
  runtimes: [Runtime!]!
  version(name: String!, runtimeId: ID!): Version!
  versions(runtimeId: ID!): [Version!]!
  userActivityList(
    userEmail: String
    types: [UserActivityType!]
    versionIds: [String!]
    fromDate: String
    toDate: String
    lastId: String
  ): [UserActivity!]!
  logs(runtimeId: ID!, filters: LogFilters!, cursor: String): LogPage!
  metrics(
    runtimeId: ID!
    versionName: String!
    startDate: String!
    endDate: String!
  ): Metrics
}

type Mutation {
  createRuntime(input: CreateRuntimeInput!): Runtime!
  createVersion(input: CreateVersionInput!): Version!
  startVersion(input: StartVersionInput!): Version!
  stopVersion(input: StopVersionInput!): Version!
  publishVersion(input: PublishVersionInput!): Version!
  unpublishVersion(input: UnpublishVersionInput!): Version!
  updateVersionUserConfiguration(input: UpdateConfigurationInput!): Version!
  updateAccessLevel(input: UpdateAccessLevelInput!): [String!]! # TODO: refactor
}

type Subscription {
  watchNodeLogs(
    runtimeId: ID!
    versionName: String!
    filters: LogFilters!
  ): NodeLog!
  watchNodeStatus(versionName: String!, runtimeId: ID!): Node!
  watchVersion: Version!
}

input CreateRuntimeInput {
  id: String!
  name: String!
  description: String!
}

input CreateVersionInput {
  file: Upload!
  runtimeId: ID!
}

input StartVersionInput {
  versionName: String!
  comment: String!
  runtimeId: ID!
}

input StopVersionInput {
  versionName: String!
  comment: String!
  runtimeId: ID!
}

input PublishVersionInput {
  versionName: String!
  comment: String!
  runtimeId: ID!
}

input UnpublishVersionInput {
  versionName: String!
  comment: String!
  runtimeId: ID!
}

input UsersInput {
  userIds: [ID!]!
  comment: String!
}

input UpdateAccessLevelInput {
  userIds: [ID!]!
  accessLevel: AccessLevel!
  comment: String!
}

input SettingsInput {
  authAllowedDomains: [String!]
  sessionLifetimeInDays: Int
}

enum AccessLevel {
  VIEWER
  MANAGER
  ADMIN
}

type ApiToken {
  id: ID!
  name: String!
  creationDate: String!
  lastActivity: String
}

type ConfigurationVariable {
  key: String!
  value: String!
  type: ConfigurationVariableType!
}

enum ConfigurationVariableType {
  VARIABLE
  FILE
}

input ConfigurationVariablesInput {
  key: String!
  value: String!
}

input UpdateConfigurationInput {
  versionName: String!
  runtimeId: ID!
  configurationVariables: [ConfigurationVariablesInput!]!
}

type Runtime {
  id: ID!
  name: String!
  description: String!
  creationDate: String!
  measurementsUrl: String!
  databaseUrl: String!
  entrypointAddress: String!
  publishedVersion: Version
  creationAuthor: String!
}

type Node {
  id: ID!
  name: String!
  status: NodeStatus!
  subscriptions: [String!]
  replicas: Int!
}

enum NodeStatus {
  STARTING
  STARTED
  STOPPED
  ERROR
}

type Workflow {
  id: ID!
  name: String!
  entrypoint: String
  exitpoint: String
  nodes: [Node!]!
}

enum KrtVersion {
  v2
}

type Version {
  id: ID!
  krtVersion: KrtVersion!
  name: String!
  description: String!
  status: VersionStatus!
  creationDate: String!
  creationAuthor: String!
  publicationDate: String
  publicationAuthor: String
  workflows: [Workflow!]!
  config: VersionUserConfig!
  hasDoc: Boolean
  errors: [String!]!
}

type VersionUserConfig {
  vars: [ConfigurationVariable!]!
  completed: Boolean!
}

enum VersionStatus {
  CREATING
  CREATED
  STARTING
  STARTED
  PUBLISHED
  STOPPING
  STOPPED
  ERROR
}

type Settings {
  authAllowedDomains: [String!]!
  sessionLifetimeInDays: Int!
}

type UserActivityVar {
  key: String!
  value: String!
}

type UserActivity {
  id: ID!
  type: UserActivityType!
  user: String!
  date: String!
  vars: [UserActivityVar!]!
}

enum UserActivityType {
  LOGIN
  LOGOUT
  CREATE_RUNTIME
  CREATE_VERSION
  PUBLISH_VERSION
  UNPUBLISH_VERSION
  START_VERSION
  STOP_VERSION
  UPDATE_SETTING
  UPDATE_VERSION_CONFIGURATION
  CREATE_USER
  REMOVE_USERS
  UPDATE_ACCESS_LEVELS
  REVOKE_SESSIONS
  GENERATE_API_TOKEN
  DELETE_API_TOKEN
}

input LogFilters {
  startDate: String!
  endDate: String
  search: String
  levels: [LogLevel!]
  nodeIds: [ID!]
  versionsIds: [ID!]
  workflowsNames: [ID!]
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

type NodeLog {
  id: ID!
  date: String!
  nodeId: String
  nodeName: String
  workflowId: String
  workflowName: String
  message: String!
  level: LogLevel!
}

type LogPage {
  cursor: String
  items: [NodeLog!]!
}

type Metrics {
  values: MetricsValues!
  charts: MetricsCharts!
}

type MetricsValues {
  accuracy: MetricsAccuracy!
  missing: Int!
  newLabels: Int!
}

type MetricsAccuracy {
  total: Int!
  micro: Int!
  macro: Int!
  weighted: Int!
}

type MetricsCharts {
  confusionMatrix: [MetricChartData!]!
  seriesAccuracy: [MetricChartData!]!
  seriesRecall: [MetricChartData!]!
  seriesSupport: [MetricChartData!]!
  successVsFails: [MetricChartData!]!
}

type MetricChartData {
  x: String!
  y: String!
  z: String!
}
