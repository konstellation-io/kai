// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ImageBuilderMock is an autogenerated mock type for the ImageBuilder type
type ImageBuilderMock struct {
	mock.Mock
}

type ImageBuilderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageBuilderMock) EXPECT() *ImageBuilderMock_Expecter {
	return &ImageBuilderMock_Expecter{mock: &_m.Mock}
}

// BuildImage provides a mock function with given fields: ctx, name, file
func (_m *ImageBuilderMock) BuildImage(ctx context.Context, processID, processImage string, file []byte) (string, error) {
	ret := _m.Called(ctx, processID, file)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, processID, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, processID, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, processID, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageBuilderMock_BuildImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildImage'
type ImageBuilderMock_BuildImage_Call struct {
	*mock.Call
}

// BuildImage is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - file []byte
func (_e *ImageBuilderMock_Expecter) BuildImage(ctx interface{}, name interface{}, file interface{}) *ImageBuilderMock_BuildImage_Call {
	return &ImageBuilderMock_BuildImage_Call{Call: _e.mock.On("BuildImage", ctx, name, file)}
}

func (_c *ImageBuilderMock_BuildImage_Call) Run(run func(ctx context.Context, name string, file []byte)) *ImageBuilderMock_BuildImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *ImageBuilderMock_BuildImage_Call) Return(_a0 string, _a1 error) *ImageBuilderMock_BuildImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImageBuilderMock_BuildImage_Call) RunAndReturn(run func(context.Context, string, []byte) (string, error)) *ImageBuilderMock_BuildImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewImageBuilderMock creates a new instance of ImageBuilderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageBuilderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageBuilderMock {
	mock := &ImageBuilderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
