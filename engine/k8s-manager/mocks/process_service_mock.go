// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	usecase "github.com/konstellation-io/kai/engine/k8s-manager/internal/application/usecase"
	mock "github.com/stretchr/testify/mock"
)

// ProcessServiceMock is an autogenerated mock type for the ProcessService type
type ProcessServiceMock struct {
	mock.Mock
}

type ProcessServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessServiceMock) EXPECT() *ProcessServiceMock_Expecter {
	return &ProcessServiceMock_Expecter{mock: &_m.Mock}
}

// RegisterProcess provides a mock function with given fields: ctx, params
func (_m *ProcessServiceMock) RegisterProcess(ctx context.Context, params usecase.RegisterProcessParams) (string, error) {
	ret := _m.Called(ctx, params)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RegisterProcessParams) (string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RegisterProcessParams) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.RegisterProcessParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessServiceMock_RegisterProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProcess'
type ProcessServiceMock_RegisterProcess_Call struct {
	*mock.Call
}

// RegisterProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - params usecase.RegisterProcessParams
func (_e *ProcessServiceMock_Expecter) RegisterProcess(ctx interface{}, params interface{}) *ProcessServiceMock_RegisterProcess_Call {
	return &ProcessServiceMock_RegisterProcess_Call{Call: _e.mock.On("RegisterProcess", ctx, params)}
}

func (_c *ProcessServiceMock_RegisterProcess_Call) Run(run func(ctx context.Context, params usecase.RegisterProcessParams)) *ProcessServiceMock_RegisterProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.RegisterProcessParams))
	})
	return _c
}

func (_c *ProcessServiceMock_RegisterProcess_Call) Return(_a0 string, _a1 error) *ProcessServiceMock_RegisterProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessServiceMock_RegisterProcess_Call) RunAndReturn(run func(context.Context, usecase.RegisterProcessParams) (string, error)) *ProcessServiceMock_RegisterProcess_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessServiceMock creates a new instance of ProcessServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessServiceMock {
	mock := &ProcessServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
