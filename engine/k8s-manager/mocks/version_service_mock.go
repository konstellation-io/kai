// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/konstellation-io/kai/engine/k8s-manager/internal/application/usecase"
	domain "github.com/konstellation-io/kai/engine/k8s-manager/internal/domain"
	context "golang.org/x/net/context"
)

// MockVersionStarterService is a mock of VersionStarterService interface.
type MockVersionStarterService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionStarterServiceMockRecorder
}

// MockVersionStarterServiceMockRecorder is the mock recorder for MockVersionStarterService.
type MockVersionStarterServiceMockRecorder struct {
	mock *MockVersionStarterService
}

// NewMockVersionStarterService creates a new mock instance.
func NewMockVersionStarterService(ctrl *gomock.Controller) *MockVersionStarterService {
	mock := &MockVersionStarterService{ctrl: ctrl}
	mock.recorder = &MockVersionStarterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionStarterService) EXPECT() *MockVersionStarterServiceMockRecorder {
	return m.recorder
}

// StartVersion mocks base method.
func (m *MockVersionStarterService) StartVersion(ctx context.Context, version domain.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVersion", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVersion indicates an expected call of StartVersion.
func (mr *MockVersionStarterServiceMockRecorder) StartVersion(ctx, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVersion", reflect.TypeOf((*MockVersionStarterService)(nil).StartVersion), ctx, version)
}

// MockVersionStopperService is a mock of VersionStopperService interface.
type MockVersionStopperService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionStopperServiceMockRecorder
}

// MockVersionStopperServiceMockRecorder is the mock recorder for MockVersionStopperService.
type MockVersionStopperServiceMockRecorder struct {
	mock *MockVersionStopperService
}

// NewMockVersionStopperService creates a new mock instance.
func NewMockVersionStopperService(ctrl *gomock.Controller) *MockVersionStopperService {
	mock := &MockVersionStopperService{ctrl: ctrl}
	mock.recorder = &MockVersionStopperServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionStopperService) EXPECT() *MockVersionStopperServiceMockRecorder {
	return m.recorder
}

// StopVersion mocks base method.
func (m *MockVersionStopperService) StopVersion(ctx context.Context, params usecase.StopParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVersion", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVersion indicates an expected call of StopVersion.
func (mr *MockVersionStopperServiceMockRecorder) StopVersion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVersion", reflect.TypeOf((*MockVersionStopperService)(nil).StopVersion), ctx, params)
}

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// StartVersion mocks base method.
func (m *MockVersionService) StartVersion(ctx context.Context, version domain.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVersion", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVersion indicates an expected call of StartVersion.
func (mr *MockVersionServiceMockRecorder) StartVersion(ctx, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVersion", reflect.TypeOf((*MockVersionService)(nil).StartVersion), ctx, version)
}

// StopVersion mocks base method.
func (m *MockVersionService) StopVersion(ctx context.Context, params usecase.StopParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVersion", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVersion indicates an expected call of StopVersion.
func (mr *MockVersionServiceMockRecorder) StopVersion(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVersion", reflect.TypeOf((*MockVersionService)(nil).StopVersion), ctx, params)
}
