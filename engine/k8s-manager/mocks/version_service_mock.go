// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/konstellation-io/kai/engine/k8s-manager/internal/domain"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/konstellation-io/kai/engine/k8s-manager/internal/application/usecase"
)

// VersionServiceMock is an autogenerated mock type for the VersionService type
type VersionServiceMock struct {
	mock.Mock
}

type VersionServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionServiceMock) EXPECT() *VersionServiceMock_Expecter {
	return &VersionServiceMock_Expecter{mock: &_m.Mock}
}

// StartVersion provides a mock function with given fields: ctx, version
func (_m *VersionServiceMock) StartVersion(ctx context.Context, version domain.Version) error {
	ret := _m.Called(ctx, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Version) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionServiceMock_StartVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartVersion'
type VersionServiceMock_StartVersion_Call struct {
	*mock.Call
}

// StartVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - version domain.Version
func (_e *VersionServiceMock_Expecter) StartVersion(ctx interface{}, version interface{}) *VersionServiceMock_StartVersion_Call {
	return &VersionServiceMock_StartVersion_Call{Call: _e.mock.On("StartVersion", ctx, version)}
}

func (_c *VersionServiceMock_StartVersion_Call) Run(run func(ctx context.Context, version domain.Version)) *VersionServiceMock_StartVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Version))
	})
	return _c
}

func (_c *VersionServiceMock_StartVersion_Call) Return(_a0 error) *VersionServiceMock_StartVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VersionServiceMock_StartVersion_Call) RunAndReturn(run func(context.Context, domain.Version) error) *VersionServiceMock_StartVersion_Call {
	_c.Call.Return(run)
	return _c
}

// StopVersion provides a mock function with given fields: ctx, params
func (_m *VersionServiceMock) StopVersion(ctx context.Context, params usecase.StopParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.StopParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionServiceMock_StopVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopVersion'
type VersionServiceMock_StopVersion_Call struct {
	*mock.Call
}

// StopVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - params usecase.StopParams
func (_e *VersionServiceMock_Expecter) StopVersion(ctx interface{}, params interface{}) *VersionServiceMock_StopVersion_Call {
	return &VersionServiceMock_StopVersion_Call{Call: _e.mock.On("StopVersion", ctx, params)}
}

func (_c *VersionServiceMock_StopVersion_Call) Run(run func(ctx context.Context, params usecase.StopParams)) *VersionServiceMock_StopVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.StopParams))
	})
	return _c
}

func (_c *VersionServiceMock_StopVersion_Call) Return(_a0 error) *VersionServiceMock_StopVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VersionServiceMock_StopVersion_Call) RunAndReturn(run func(context.Context, usecase.StopParams) error) *VersionServiceMock_StopVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewVersionServiceMock creates a new instance of VersionServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionServiceMock {
	mock := &VersionServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
