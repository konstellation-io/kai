// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/konstellation-io/kai/engine/k8s-manager/internal/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/konstellation-io/kai/engine/k8s-manager/internal/application/service"
)

// ContainerServiceMock is an autogenerated mock type for the ContainerService type
type ContainerServiceMock struct {
	mock.Mock
}

type ContainerServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContainerServiceMock) EXPECT() *ContainerServiceMock_Expecter {
	return &ContainerServiceMock_Expecter{mock: &_m.Mock}
}

// CreateNetwork provides a mock function with given fields: ctx, params
func (_m *ContainerServiceMock) CreateNetwork(ctx context.Context, params service.CreateNetworkParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateNetworkParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_CreateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetwork'
type ContainerServiceMock_CreateNetwork_Call struct {
	*mock.Call
}

// CreateNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateNetworkParams
func (_e *ContainerServiceMock_Expecter) CreateNetwork(ctx interface{}, params interface{}) *ContainerServiceMock_CreateNetwork_Call {
	return &ContainerServiceMock_CreateNetwork_Call{Call: _e.mock.On("CreateNetwork", ctx, params)}
}

func (_c *ContainerServiceMock_CreateNetwork_Call) Run(run func(ctx context.Context, params service.CreateNetworkParams)) *ContainerServiceMock_CreateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateNetworkParams))
	})
	return _c
}

func (_c *ContainerServiceMock_CreateNetwork_Call) Return(_a0 error) *ContainerServiceMock_CreateNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_CreateNetwork_Call) RunAndReturn(run func(context.Context, service.CreateNetworkParams) error) *ContainerServiceMock_CreateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcess provides a mock function with given fields: ctx, params
func (_m *ContainerServiceMock) CreateProcess(ctx context.Context, params service.CreateProcessParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateProcessParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_CreateProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcess'
type ContainerServiceMock_CreateProcess_Call struct {
	*mock.Call
}

// CreateProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateProcessParams
func (_e *ContainerServiceMock_Expecter) CreateProcess(ctx interface{}, params interface{}) *ContainerServiceMock_CreateProcess_Call {
	return &ContainerServiceMock_CreateProcess_Call{Call: _e.mock.On("CreateProcess", ctx, params)}
}

func (_c *ContainerServiceMock_CreateProcess_Call) Run(run func(ctx context.Context, params service.CreateProcessParams)) *ContainerServiceMock_CreateProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateProcessParams))
	})
	return _c
}

func (_c *ContainerServiceMock_CreateProcess_Call) Return(_a0 error) *ContainerServiceMock_CreateProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_CreateProcess_Call) RunAndReturn(run func(context.Context, service.CreateProcessParams) error) *ContainerServiceMock_CreateProcess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVersionConfiguration provides a mock function with given fields: ctx, version
func (_m *ContainerServiceMock) CreateVersionConfiguration(ctx context.Context, version *domain.Version) (string, error) {
	ret := _m.Called(ctx, version)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Version) (string, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Version) string); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Version) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerServiceMock_CreateVersionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVersionConfiguration'
type ContainerServiceMock_CreateVersionConfiguration_Call struct {
	*mock.Call
}

// CreateVersionConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - version *domain.Version
func (_e *ContainerServiceMock_Expecter) CreateVersionConfiguration(ctx interface{}, version interface{}) *ContainerServiceMock_CreateVersionConfiguration_Call {
	return &ContainerServiceMock_CreateVersionConfiguration_Call{Call: _e.mock.On("CreateVersionConfiguration", ctx, version)}
}

func (_c *ContainerServiceMock_CreateVersionConfiguration_Call) Run(run func(ctx context.Context, version *domain.Version)) *ContainerServiceMock_CreateVersionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Version))
	})
	return _c
}

func (_c *ContainerServiceMock_CreateVersionConfiguration_Call) Return(_a0 string, _a1 error) *ContainerServiceMock_CreateVersionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerServiceMock_CreateVersionConfiguration_Call) RunAndReturn(run func(context.Context, *domain.Version) (string, error)) *ContainerServiceMock_CreateVersionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function with given fields: ctx, product, version
func (_m *ContainerServiceMock) DeleteConfiguration(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type ContainerServiceMock_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerServiceMock_Expecter) DeleteConfiguration(ctx interface{}, product interface{}, version interface{}) *ContainerServiceMock_DeleteConfiguration_Call {
	return &ContainerServiceMock_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", ctx, product, version)}
}

func (_c *ContainerServiceMock_DeleteConfiguration_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerServiceMock_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerServiceMock_DeleteConfiguration_Call) Return(_a0 error) *ContainerServiceMock_DeleteConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_DeleteConfiguration_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerServiceMock_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetwork provides a mock function with given fields: ctx, product, version
func (_m *ContainerServiceMock) DeleteNetwork(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_DeleteNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetwork'
type ContainerServiceMock_DeleteNetwork_Call struct {
	*mock.Call
}

// DeleteNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerServiceMock_Expecter) DeleteNetwork(ctx interface{}, product interface{}, version interface{}) *ContainerServiceMock_DeleteNetwork_Call {
	return &ContainerServiceMock_DeleteNetwork_Call{Call: _e.mock.On("DeleteNetwork", ctx, product, version)}
}

func (_c *ContainerServiceMock_DeleteNetwork_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerServiceMock_DeleteNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerServiceMock_DeleteNetwork_Call) Return(_a0 error) *ContainerServiceMock_DeleteNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_DeleteNetwork_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerServiceMock_DeleteNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProcesses provides a mock function with given fields: ctx, product, version
func (_m *ContainerServiceMock) DeleteProcesses(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_DeleteProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProcesses'
type ContainerServiceMock_DeleteProcesses_Call struct {
	*mock.Call
}

// DeleteProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerServiceMock_Expecter) DeleteProcesses(ctx interface{}, product interface{}, version interface{}) *ContainerServiceMock_DeleteProcesses_Call {
	return &ContainerServiceMock_DeleteProcesses_Call{Call: _e.mock.On("DeleteProcesses", ctx, product, version)}
}

func (_c *ContainerServiceMock_DeleteProcesses_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerServiceMock_DeleteProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerServiceMock_DeleteProcesses_Call) Return(_a0 error) *ContainerServiceMock_DeleteProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_DeleteProcesses_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerServiceMock_DeleteProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublishedTriggers provides a mock function with given fields: ctx, product
func (_m *ContainerServiceMock) GetPublishedTriggers(ctx context.Context, product string) (map[string]string, error) {
	ret := _m.Called(ctx, product)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]string, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerServiceMock_GetPublishedTriggers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublishedTriggers'
type ContainerServiceMock_GetPublishedTriggers_Call struct {
	*mock.Call
}

// GetPublishedTriggers is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
func (_e *ContainerServiceMock_Expecter) GetPublishedTriggers(ctx interface{}, product interface{}) *ContainerServiceMock_GetPublishedTriggers_Call {
	return &ContainerServiceMock_GetPublishedTriggers_Call{Call: _e.mock.On("GetPublishedTriggers", ctx, product)}
}

func (_c *ContainerServiceMock_GetPublishedTriggers_Call) Run(run func(ctx context.Context, product string)) *ContainerServiceMock_GetPublishedTriggers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ContainerServiceMock_GetPublishedTriggers_Call) Return(_a0 map[string]string, _a1 error) *ContainerServiceMock_GetPublishedTriggers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerServiceMock_GetPublishedTriggers_Call) RunAndReturn(run func(context.Context, string) (map[string]string, error)) *ContainerServiceMock_GetPublishedTriggers_Call {
	_c.Call.Return(run)
	return _c
}

// PublishNetwork provides a mock function with given fields: ctx, params
func (_m *ContainerServiceMock) PublishNetwork(ctx context.Context, params service.PublishNetworkParams) (map[string]string, error) {
	ret := _m.Called(ctx, params)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PublishNetworkParams) (map[string]string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.PublishNetworkParams) map[string]string); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.PublishNetworkParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerServiceMock_PublishNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishNetwork'
type ContainerServiceMock_PublishNetwork_Call struct {
	*mock.Call
}

// PublishNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.PublishNetworkParams
func (_e *ContainerServiceMock_Expecter) PublishNetwork(ctx interface{}, params interface{}) *ContainerServiceMock_PublishNetwork_Call {
	return &ContainerServiceMock_PublishNetwork_Call{Call: _e.mock.On("PublishNetwork", ctx, params)}
}

func (_c *ContainerServiceMock_PublishNetwork_Call) Run(run func(ctx context.Context, params service.PublishNetworkParams)) *ContainerServiceMock_PublishNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.PublishNetworkParams))
	})
	return _c
}

func (_c *ContainerServiceMock_PublishNetwork_Call) Return(_a0 map[string]string, _a1 error) *ContainerServiceMock_PublishNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerServiceMock_PublishNetwork_Call) RunAndReturn(run func(context.Context, service.PublishNetworkParams) (map[string]string, error)) *ContainerServiceMock_PublishNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// UnpublishNetwork provides a mock function with given fields: ctx, product, version
func (_m *ContainerServiceMock) UnpublishNetwork(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_UnpublishNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpublishNetwork'
type ContainerServiceMock_UnpublishNetwork_Call struct {
	*mock.Call
}

// UnpublishNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerServiceMock_Expecter) UnpublishNetwork(ctx interface{}, product interface{}, version interface{}) *ContainerServiceMock_UnpublishNetwork_Call {
	return &ContainerServiceMock_UnpublishNetwork_Call{Call: _e.mock.On("UnpublishNetwork", ctx, product, version)}
}

func (_c *ContainerServiceMock_UnpublishNetwork_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerServiceMock_UnpublishNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerServiceMock_UnpublishNetwork_Call) Return(_a0 error) *ContainerServiceMock_UnpublishNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_UnpublishNetwork_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerServiceMock_UnpublishNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// WaitProcesses provides a mock function with given fields: ctx, version
func (_m *ContainerServiceMock) WaitProcesses(ctx context.Context, version *domain.Version) error {
	ret := _m.Called(ctx, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Version) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerServiceMock_WaitProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitProcesses'
type ContainerServiceMock_WaitProcesses_Call struct {
	*mock.Call
}

// WaitProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - version *domain.Version
func (_e *ContainerServiceMock_Expecter) WaitProcesses(ctx interface{}, version interface{}) *ContainerServiceMock_WaitProcesses_Call {
	return &ContainerServiceMock_WaitProcesses_Call{Call: _e.mock.On("WaitProcesses", ctx, version)}
}

func (_c *ContainerServiceMock_WaitProcesses_Call) Run(run func(ctx context.Context, version *domain.Version)) *ContainerServiceMock_WaitProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Version))
	})
	return _c
}

func (_c *ContainerServiceMock_WaitProcesses_Call) Return(_a0 error) *ContainerServiceMock_WaitProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerServiceMock_WaitProcesses_Call) RunAndReturn(run func(context.Context, *domain.Version) error) *ContainerServiceMock_WaitProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// NewContainerServiceMock creates a new instance of ContainerServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerServiceMock {
	mock := &ContainerServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
