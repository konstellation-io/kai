// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/konstellation-io/kai/engine/k8s-manager/internal/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/konstellation-io/kai/engine/k8s-manager/internal/application/service"
)

// ContainerService is an autogenerated mock type for the ContainerService type
type ContainerService struct {
	mock.Mock
}

type ContainerService_Expecter struct {
	mock *mock.Mock
}

func (_m *ContainerService) EXPECT() *ContainerService_Expecter {
	return &ContainerService_Expecter{mock: &_m.Mock}
}

// CreateNetwork provides a mock function with given fields: ctx, params
func (_m *ContainerService) CreateNetwork(ctx context.Context, params service.CreateNetworkParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateNetworkParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerService_CreateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetwork'
type ContainerService_CreateNetwork_Call struct {
	*mock.Call
}

// CreateNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateNetworkParams
func (_e *ContainerService_Expecter) CreateNetwork(ctx interface{}, params interface{}) *ContainerService_CreateNetwork_Call {
	return &ContainerService_CreateNetwork_Call{Call: _e.mock.On("CreateNetwork", ctx, params)}
}

func (_c *ContainerService_CreateNetwork_Call) Run(run func(ctx context.Context, params service.CreateNetworkParams)) *ContainerService_CreateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateNetworkParams))
	})
	return _c
}

func (_c *ContainerService_CreateNetwork_Call) Return(_a0 error) *ContainerService_CreateNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerService_CreateNetwork_Call) RunAndReturn(run func(context.Context, service.CreateNetworkParams) error) *ContainerService_CreateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcess provides a mock function with given fields: ctx, params
func (_m *ContainerService) CreateProcess(ctx context.Context, params service.CreateProcessParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateProcessParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerService_CreateProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcess'
type ContainerService_CreateProcess_Call struct {
	*mock.Call
}

// CreateProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - params service.CreateProcessParams
func (_e *ContainerService_Expecter) CreateProcess(ctx interface{}, params interface{}) *ContainerService_CreateProcess_Call {
	return &ContainerService_CreateProcess_Call{Call: _e.mock.On("CreateProcess", ctx, params)}
}

func (_c *ContainerService_CreateProcess_Call) Run(run func(ctx context.Context, params service.CreateProcessParams)) *ContainerService_CreateProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.CreateProcessParams))
	})
	return _c
}

func (_c *ContainerService_CreateProcess_Call) Return(_a0 error) *ContainerService_CreateProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerService_CreateProcess_Call) RunAndReturn(run func(context.Context, service.CreateProcessParams) error) *ContainerService_CreateProcess_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVersionConfiguration provides a mock function with given fields: ctx, version
func (_m *ContainerService) CreateVersionConfiguration(ctx context.Context, version domain.Version) (string, error) {
	ret := _m.Called(ctx, version)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Version) (string, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Version) string); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Version) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerService_CreateVersionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVersionConfiguration'
type ContainerService_CreateVersionConfiguration_Call struct {
	*mock.Call
}

// CreateVersionConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - version domain.Version
func (_e *ContainerService_Expecter) CreateVersionConfiguration(ctx interface{}, version interface{}) *ContainerService_CreateVersionConfiguration_Call {
	return &ContainerService_CreateVersionConfiguration_Call{Call: _e.mock.On("CreateVersionConfiguration", ctx, version)}
}

func (_c *ContainerService_CreateVersionConfiguration_Call) Run(run func(ctx context.Context, version domain.Version)) *ContainerService_CreateVersionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Version))
	})
	return _c
}

func (_c *ContainerService_CreateVersionConfiguration_Call) Return(_a0 string, _a1 error) *ContainerService_CreateVersionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerService_CreateVersionConfiguration_Call) RunAndReturn(run func(context.Context, domain.Version) (string, error)) *ContainerService_CreateVersionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function with given fields: ctx, product, version
func (_m *ContainerService) DeleteConfiguration(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerService_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type ContainerService_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerService_Expecter) DeleteConfiguration(ctx interface{}, product interface{}, version interface{}) *ContainerService_DeleteConfiguration_Call {
	return &ContainerService_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", ctx, product, version)}
}

func (_c *ContainerService_DeleteConfiguration_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerService_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerService_DeleteConfiguration_Call) Return(_a0 error) *ContainerService_DeleteConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerService_DeleteConfiguration_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerService_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetwork provides a mock function with given fields: ctx, product, version
func (_m *ContainerService) DeleteNetwork(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerService_DeleteNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetwork'
type ContainerService_DeleteNetwork_Call struct {
	*mock.Call
}

// DeleteNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerService_Expecter) DeleteNetwork(ctx interface{}, product interface{}, version interface{}) *ContainerService_DeleteNetwork_Call {
	return &ContainerService_DeleteNetwork_Call{Call: _e.mock.On("DeleteNetwork", ctx, product, version)}
}

func (_c *ContainerService_DeleteNetwork_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerService_DeleteNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerService_DeleteNetwork_Call) Return(_a0 error) *ContainerService_DeleteNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerService_DeleteNetwork_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerService_DeleteNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProcesses provides a mock function with given fields: ctx, product, version
func (_m *ContainerService) DeleteProcesses(ctx context.Context, product string, version string) error {
	ret := _m.Called(ctx, product, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, product, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContainerService_DeleteProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProcesses'
type ContainerService_DeleteProcesses_Call struct {
	*mock.Call
}

// DeleteProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - product string
//   - version string
func (_e *ContainerService_Expecter) DeleteProcesses(ctx interface{}, product interface{}, version interface{}) *ContainerService_DeleteProcesses_Call {
	return &ContainerService_DeleteProcesses_Call{Call: _e.mock.On("DeleteProcesses", ctx, product, version)}
}

func (_c *ContainerService_DeleteProcesses_Call) Run(run func(ctx context.Context, product string, version string)) *ContainerService_DeleteProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ContainerService_DeleteProcesses_Call) Return(_a0 error) *ContainerService_DeleteProcesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerService_DeleteProcesses_Call) RunAndReturn(run func(context.Context, string, string) error) *ContainerService_DeleteProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// NewContainerService creates a new instance of ContainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerService {
	mock := &ContainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
