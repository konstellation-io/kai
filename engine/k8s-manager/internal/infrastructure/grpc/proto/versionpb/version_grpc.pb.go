// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: version.proto

package versionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VersionServiceClient is the client API for VersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionServiceClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Response, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Response, error)
	Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*Response, error)
	WatchProcessStatus(ctx context.Context, in *ProcessStatusRequest, opts ...grpc.CallOption) (VersionService_WatchProcessStatusClient, error)
}

type versionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionServiceClient(cc grpc.ClientConnInterface) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/version.VersionService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/version.VersionService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/version.VersionService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/version.VersionService/Unpublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) WatchProcessStatus(ctx context.Context, in *ProcessStatusRequest, opts ...grpc.CallOption) (VersionService_WatchProcessStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &VersionService_ServiceDesc.Streams[0], "/version.VersionService/WatchProcessStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &versionServiceWatchProcessStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VersionService_WatchProcessStatusClient interface {
	Recv() (*ProcessStatusResponse, error)
	grpc.ClientStream
}

type versionServiceWatchProcessStatusClient struct {
	grpc.ClientStream
}

func (x *versionServiceWatchProcessStatusClient) Recv() (*ProcessStatusResponse, error) {
	m := new(ProcessStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VersionServiceServer is the server API for VersionService service.
// All implementations must embed UnimplementedVersionServiceServer
// for forward compatibility
type VersionServiceServer interface {
	Start(context.Context, *StartRequest) (*Response, error)
	Stop(context.Context, *StopRequest) (*Response, error)
	Publish(context.Context, *PublishRequest) (*Response, error)
	Unpublish(context.Context, *UnpublishRequest) (*Response, error)
	WatchProcessStatus(*ProcessStatusRequest, VersionService_WatchProcessStatusServer) error
	mustEmbedUnimplementedVersionServiceServer()
}

// UnimplementedVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVersionServiceServer struct {
}

func (UnimplementedVersionServiceServer) Start(context.Context, *StartRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedVersionServiceServer) Stop(context.Context, *StopRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedVersionServiceServer) Publish(context.Context, *PublishRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedVersionServiceServer) Unpublish(context.Context, *UnpublishRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpublish not implemented")
}
func (UnimplementedVersionServiceServer) WatchProcessStatus(*ProcessStatusRequest, VersionService_WatchProcessStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchProcessStatus not implemented")
}
func (UnimplementedVersionServiceServer) mustEmbedUnimplementedVersionServiceServer() {}

// UnsafeVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionServiceServer will
// result in compilation errors.
type UnsafeVersionServiceServer interface {
	mustEmbedUnimplementedVersionServiceServer()
}

func RegisterVersionServiceServer(s grpc.ServiceRegistrar, srv VersionServiceServer) {
	s.RegisterService(&VersionService_ServiceDesc, srv)
}

func _VersionService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/version.VersionService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/version.VersionService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/version.VersionService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/version.VersionService/Unpublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Unpublish(ctx, req.(*UnpublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_WatchProcessStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VersionServiceServer).WatchProcessStatus(m, &versionServiceWatchProcessStatusServer{stream})
}

type VersionService_WatchProcessStatusServer interface {
	Send(*ProcessStatusResponse) error
	grpc.ServerStream
}

type versionServiceWatchProcessStatusServer struct {
	grpc.ServerStream
}

func (x *versionServiceWatchProcessStatusServer) Send(m *ProcessStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VersionService_ServiceDesc is the grpc.ServiceDesc for VersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "version.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _VersionService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _VersionService_Stop_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _VersionService_Publish_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _VersionService_Unpublish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchProcessStatus",
			Handler:       _VersionService_WatchProcessStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "version.proto",
}
