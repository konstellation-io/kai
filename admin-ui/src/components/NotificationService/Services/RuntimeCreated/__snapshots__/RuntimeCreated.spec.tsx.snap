// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RuntimeCreated matches snapshot 1`] = `
<Wrapper>
  <MockedProvider
    addTypename={false}
    mocks={
      Array [
        Object {
          "request": Object {
            "query": Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "runtimeCreated",
                  },
                  "operation": "subscription",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "arguments": Array [],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "runtimeCreated",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                            },
                            Object {
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "name",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 71,
                "source": Object {
                  "body": "subscription runtimeCreated {
  runtimeCreated {
    id
    name
  }
}
",
                  "locationOffset": Object {
                    "column": 1,
                    "line": 1,
                  },
                  "name": "GraphQL request",
                },
                "start": 0,
              },
            },
          },
          "result": Object {
            "data": Object {
              "runtimeCreated": Object {
                "id": "some id",
                "name": "some name",
              },
            },
          },
        },
      ]
    }
  >
    <ApolloProvider
      client={
        ApolloClient {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {
                "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                  "id": "some id",
                  "name": "some name",
                },
                "ROOT_SUBSCRIPTION": Object {
                  "runtimeCreated": Object {
                    "generated": true,
                    "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                    "type": "id",
                    "typename": undefined,
                  },
                },
              },
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {
                "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                  "id": "some id",
                  "name": "some name",
                },
                "ROOT_SUBSCRIPTION": Object {
                  "runtimeCreated": Object {
                    "generated": true,
                    "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                    "type": "id",
                    "typename": undefined,
                  },
                },
              },
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "clearStoreCallbacks": Array [],
          "defaultOptions": Object {},
          "disableNetworkFetches": false,
          "link": MockLink {
            "addTypename": false,
            "mockedResponsesByKey": Object {
              "{\\"query\\":\\"subscription runtimeCreated {\\\\n  runtimeCreated {\\\\n    id\\\\n    name\\\\n  }\\\\n}\\\\n\\"}": Array [],
            },
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {
                  "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                    "id": "some id",
                    "name": "some name",
                  },
                  "ROOT_SUBSCRIPTION": Object {
                    "runtimeCreated": Object {
                      "generated": true,
                      "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                      "type": "id",
                      "typename": undefined,
                    },
                  },
                },
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {
                  "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                    "id": "some id",
                    "name": "some name",
                  },
                  "ROOT_SUBSCRIPTION": Object {
                    "runtimeCreated": Object {
                      "generated": true,
                      "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                      "type": "id",
                      "typename": undefined,
                    },
                  },
                },
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutate": [Function],
          "query": [Function],
          "queryDeduplication": true,
          "queryManager": QueryManager {
            "assumeImmutableResults": false,
            "clientAwareness": Object {
              "name": undefined,
              "version": undefined,
            },
            "dataStore": DataStore {
              "cache": InMemoryCache {
                "addTypename": false,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": false,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {
                    "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                      "id": "some id",
                      "name": "some name",
                    },
                    "ROOT_SUBSCRIPTION": Object {
                      "runtimeCreated": Object {
                        "generated": true,
                        "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                        "type": "id",
                        "typename": undefined,
                      },
                    },
                  },
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {
                    "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                      "id": "some id",
                      "name": "some name",
                    },
                    "ROOT_SUBSCRIPTION": Object {
                      "runtimeCreated": Object {
                        "generated": true,
                        "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                        "type": "id",
                        "typename": undefined,
                      },
                    },
                  },
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
            },
            "fetchQueryRejectFns": Map {},
            "idCounter": 1,
            "inFlightLinkObservables": Map {},
            "link": MockLink {
              "addTypename": false,
              "mockedResponsesByKey": Object {
                "{\\"query\\":\\"subscription runtimeCreated {\\\\n  runtimeCreated {\\\\n    id\\\\n    name\\\\n  }\\\\n}\\\\n\\"}": Array [],
              },
            },
            "localState": LocalState {
              "cache": InMemoryCache {
                "addTypename": false,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": false,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {
                    "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                      "id": "some id",
                      "name": "some name",
                    },
                    "ROOT_SUBSCRIPTION": Object {
                      "runtimeCreated": Object {
                        "generated": true,
                        "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                        "type": "id",
                        "typename": undefined,
                      },
                    },
                  },
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {
                    "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                      "id": "some id",
                      "name": "some name",
                    },
                    "ROOT_SUBSCRIPTION": Object {
                      "runtimeCreated": Object {
                        "generated": true,
                        "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                        "type": "id",
                        "typename": undefined,
                      },
                    },
                  },
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "client": [Circular],
            },
            "mutationStore": MutationStore {
              "store": Object {},
            },
            "onBroadcast": [Function],
            "pollingInfoByQueryId": Map {},
            "queries": Map {},
            "queryDeduplication": true,
            "queryStore": QueryStore {
              "store": Object {},
            },
            "ssrMode": false,
            "transformCache": WeakMap {},
          },
          "reFetchObservableQueries": [Function],
          "resetStore": [Function],
          "resetStoreCallbacks": Array [],
          "store": DataStore {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {
                  "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                    "id": "some id",
                    "name": "some name",
                  },
                  "ROOT_SUBSCRIPTION": Object {
                    "runtimeCreated": Object {
                      "generated": true,
                      "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                      "type": "id",
                      "typename": undefined,
                    },
                  },
                },
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {
                  "$ROOT_SUBSCRIPTION.runtimeCreated": Object {
                    "id": "some id",
                    "name": "some name",
                  },
                  "ROOT_SUBSCRIPTION": Object {
                    "runtimeCreated": Object {
                      "generated": true,
                      "id": "$ROOT_SUBSCRIPTION.runtimeCreated",
                      "type": "id",
                      "typename": undefined,
                    },
                  },
                },
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
          },
          "typeDefs": undefined,
          "version": "2.6.8",
          "watchQuery": [Function],
        }
      }
    >
      <RuntimeCreated>
        <div>
          <Notification
            buttonAction={[Function]}
            buttonLabel="GO TO RUNTIME"
            key="some id"
            message="The RUNTIME \\"some name\\" has been successfully created!"
            onCloseNotification={[Function]}
          >
            <div
              className="container opened"
            >
              <div
                className="message"
                title="The RUNTIME \\"some name\\" has been successfully created!"
              >
                The RUNTIME "some name" has been successfully created!
              </div>
              <Button
                label="GO TO RUNTIME"
                onClick={[Function]}
              >
                <div
                  className="btn default middle label"
                  onClick={[Function]}
                  style={
                    Object {
                      "height": 40,
                      "lineHeight": "40px",
                    }
                  }
                >
                  <span>
                    GO TO RUNTIME
                  </span>
                </div>
              </Button>
              <Button
                Icon={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "displayName": "CloseIcon",
                    "muiName": "SvgIcon",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "render": [Function],
                    },
                  }
                }
                label=""
                onClick={[Function]}
              >
                <div
                  className="btn default middle label"
                  onClick={[Function]}
                  style={
                    Object {
                      "height": 40,
                      "lineHeight": "40px",
                    }
                  }
                >
                  <ForwardRef
                    className="icon-regular"
                  >
                    <WithStyles(ForwardRef(SvgIcon))
                      className="icon-regular"
                    >
                      <ForwardRef(SvgIcon)
                        className="icon-regular"
                        classes={
                          Object {
                            "colorAction": "MuiSvgIcon-colorAction",
                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                            "colorError": "MuiSvgIcon-colorError",
                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                            "root": "MuiSvgIcon-root",
                          }
                        }
                      >
                        <svg
                          aria-hidden="true"
                          className="MuiSvgIcon-root icon-regular"
                          focusable="false"
                          role="presentation"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </WithStyles(ForwardRef(SvgIcon))>
                  </ForwardRef>
                  <span />
                </div>
              </Button>
            </div>
          </Notification>
        </div>
      </RuntimeCreated>
    </ApolloProvider>
  </MockedProvider>
</Wrapper>
`;
